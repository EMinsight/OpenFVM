#line 2 "Gmsh.yy.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvsroot/gmsh/Parser/Gmsh.yy.cpp,v 1.259.2.2 2006-04-04 04:36:10 geuzaine Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 142
#define YY_END_OF_BUFFER 143
static yyconst short int yy_accept[585] =
    {   0,
        0,    0,  143,  141,    1,    1,  141,    5,  141,    6,
      141,  141,  141,  141,  141,  136,   20,    2,  141,   15,
      141,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  141,  141,   28,   24,   18,   25,
       16,   26,   17,    0,  138,    3,    4,   19,   22,  137,
      136,    0,   30,   27,   31,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,   84,   83,  140,

      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
       99,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  132,  133,  140,  140,  140,
      140,  140,  140,  140,  140,   23,   29,   21,    0,  137,
        0,    0,  139,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,   51,  140,  140,  140,  140,  140,  140,  140,   64,
      140,  140,  140,  140,   75,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,   90,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,

      140,  140,  140,  140,  140,  140,  113,  140,  140,  140,
      140,  140,  140,  140,  126,  140,  140,  140,  140,  140,
      140,  140,    0,  138,    0,    0,  137,   32,  140,  140,
      140,  140,   36,   38,  140,  140,  140,  140,   44,   59,
      140,   48,  140,  140,  140,  140,  140,  140,   50,  140,
      140,   63,  140,  140,  140,  140,   71,  140,   72,  140,
       74,  140,  140,  140,   81,  140,  140,  140,  140,  140,
      140,   88,  140,   89,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  110,  140,  140,  140,
      140,  122,  114,  140,  140,  112,  140,  140,  140,  140,

      140,  135,  125,  140,  140,  140,  140,  140,  131,   10,
        9,    8,  140,   12,   14,    0,  137,   34,  140,  140,
      140,   40,  140,  140,  140,  140,  140,  140,  140,  140,
       56,  140,  140,  140,  140,  140,  140,  140,   70,  140,
       73,  140,  140,  140,   82,  140,  140,   86,  140,  140,
       91,  140,  140,  140,   96,   97,  140,  140,  100,  140,
      101,  102,  140,  140,  140,  140,  140,  109,  140,  140,
      140,  140,  140,  140,  140,  128,  140,  140,  129,  140,
       11,  140,   13,  140,   33,   37,   39,  140,  140,   43,
      140,   46,  140,  140,   53,  140,  140,  140,  140,   60,

       61,  140,  140,  140,   69,  140,  140,  140,  140,  140,
      140,  140,   92,   87,  140,  140,   93,  140,  140,  106,
      105,  140,  140,  111,  108,  115,  140,  119,  140,  140,
      140,  140,  140,  140,  140,  130,    7,  140,   41,  140,
       45,  140,  140,  140,  140,  140,   49,   55,  140,   66,
      140,  140,   67,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  118,  140,  140,  116,
      140,  140,  140,  127,  140,  140,  140,  140,  140,  140,
      140,  140,   65,   68,   76,  140,  140,  140,   77,  140,
      140,   94,   95,  140,   98,  140,  140,  140,  140,  117,

      140,  140,  140,   42,  140,  140,  140,   54,  140,   62,
      140,  140,  140,  140,   85,  140,  140,  107,  120,  140,
      140,  124,  140,  140,   58,  140,   57,  140,  140,  140,
      140,  104,  140,  140,  140,  140,   47,  140,  140,  140,
      140,  140,  103,  121,  123,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,   52,  140,
      140,  140,  140,  140,  140,  140,  140,  140,   35,  140,
      140,  140,  140,  140,  140,  140,  140,   78,   79,   80,
      140,  140,  134,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    6,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   39,   39,   39,
        1,   46,    1,    1,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   39,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,    1,   73,    1,   74,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[75] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    2,    2,    2,    2,    1,    1,    1,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    1,    1
    } ;

static yyconst short int yy_base[586] =
    {   0,
        0,    0,  706,  707,  707,  707,  684,  707,  698,  707,
      682,   66,   67,   65,   77,   79,  707,  707,  681,  680,
      679,   47,   58,   66,   68,   68,   81,   48,   30,   55,
        0,  639,   85,   46,  631,  633,   95,   97,   99,  152,
      631,  634,  638,  641,  619,  670,  707,  707,  707,  707,
      707,  707,  707,  679,  158,  707,  707,  707,  707,  163,
      178,  208,  707,  707,  707,    0,  628,  632,  637,  630,
       68,  623,  612,  616,  623,   51,  625,  632,  615,  143,
      620,  619,  628,  613,  616,  622,  141,  623,  610,  609,
      605,  608,  626,  600,  614,  602,  621,    0,  596,  600,

      589,  599,  598,  127,  626,  605,  591,  603,  589,  581,
        0,   96,   91,   96,  591,  146,  584,  591,  587,  587,
       72,  582,  581,  580,  584,    0,    0,  607,  581,  589,
      158,  583,  580,  571,  567,  707,  707,  707,  218,  223,
      232,  238,  243,  570,  586,  236,  573,  572,  567,  572,
      573,  568,  565,  568,  566,  566,  559,  572,  569,  559,
      120,  564,  566,  569,  547,  557,  558,  156,  547,    0,
      548,  546,  549,  558,    0,  558,  577,  562,  553,  543,
      576,  550,  535,  548,  545,  546,  583,  534,  548,  527,
      544,  540,  543,  525,  529,  534,  527,  534,  525,  530,

      532,  521,  514,  532,  527,  509,  522,  520,  519,  508,
      241,  520,  513,  544,  515,  521,  508,  508,  506,  498,
      509,  218,  256,  274,  283,  288,  293,    0,  498,  501,
      505,  512,    0,  544,  510,  501,  504,  504,    0,    0,
      487,    0,  505,  494,  487,  486,  493,  490,    0,  481,
      480,    0,  489,  482,  482,  489,    0,  474,    0,  476,
        0,  473,  491,  489,    0,  470,  495,  470,  468,  468,
      465,    0,  517,    0,   62,  471,  463,  463,  467,  469,
      472,  467,  456,  457,  454,  455,    0,  459,  453,  450,
      464,    0,    0,  454,  453,    0,  464,  447,  458,  461,

      456,    0,    0,  436,  441,  446,  450,  444,    0,    0,
      444,    0,  449,  442,    0,  298,  303,  454,  433,  437,
      436,    0,  445,  434,  429,  155,  434,  441,  438,  437,
      446,  427,  434,  433,  432,  433,  178,  418,    0,  430,
        0,  424,  191,  421,    0,  440,  412,    0,  411,  420,
        0,  426,  417,  411,    0,    0,  419,  420,    0,  409,
        0,    0,  415,  415,  417,  405,  412,    0,  411,  396,
      395,  408,  401,  408,  391,    0,  146,  404,    0,  403,
        0,  400,    0,  397,    0,    0,  437,  385,  398,    0,
      389,    0,  390,  381,    0,  386,  397,  392,  373,    0,

        0,  394,  211,  385,    0,  388,  378,  298,  415,  370,
      399,  383,    0,    0,  374,  361,    0,  366,  383,    0,
        0,  365,  373,    0,    0,    0,  375,    0,  374,  378,
      373,  360,  367,  374,  370,    0,    0,  354,    0,  358,
        0,  364,  377,  364,  365,  365,    0,    0,  347,    0,
      347,  361,    0,  350,  377,  372,  365,  354,  371,  354,
      346,  350,  337,  342,  334,  338,    0,  341,  330,    0,
      324,  334,  327,    0,  337,  327,  366,  328,  324,  335,
      328,  337,    0,    0,    0,  347,  346,  357,    0,  358,
      314,    0,    0,  323,    0,  322,  325,  306,  319,    0,

      318,  321,  335,    0,  310,  311,  313,    0,  316,    0,
      327,  326,  335,  322,    0,  313,  301,    0,    0,  293,
      294,    0,  297,  288,    0,  292,    0,  309,  308,  307,
      322,    0,  292,  299,  298,  283,    0,  282,  303,  302,
      301,  307,    0,    0,    0,  287,  286,  314,  313,  312,
      302,  276,  286,  295,  294,  293,  285,  271,    0,  289,
      287,  286,  285,  260,  293,  292,  291,  270,    0,  257,
      248,  247,  244,  229,  228,  226,  192,    0,    0,    0,
      174,  159,    0,  707,  102
    } ;

static yyconst short int yy_def[586] =
    {   0,
      584,    1,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  584,  584,  584,  584,  584,
      584,  584,  584,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  584,  584,  584,  584,  584,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  584,  584,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,    0,  584
    } ;

static yyconst short int yy_nxt[782] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   16,   16,   16,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   31,   38,
       39,   40,   41,   42,   43,    4,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   44,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   45,   46,   50,   54,   52,   55,   55,   55,
       55,   55,   93,  105,   56,   95,   51,   53,   57,   60,
       97,   61,   61,   61,   61,   61,   67,   58,   72,   94,

       96,  352,  353,   66,   68,   62,  106,   98,  154,   73,
       69,   70,   71,   76,   99,  148,  155,   77,   74,   81,
       78,   79,   59,   82,   75,   85,   80,   86,   88,  208,
       62,   83,  101,  149,   84,  209,  102,   87,   89,   90,
      103,   91,  109,  195,  115,  104,  197,   92,  116,  110,
      111,  199,  112,  119,  120,  113,  200,  117,  114,  198,
      121,  122,  196,  118,  123,  124,  126,  127,  247,  125,
       55,   55,   55,   55,   55,  140,  140,  140,  140,  140,
      187,  248,  128,  255,  139,  583,  256,  188,   60,  141,
       61,   61,   61,   61,   61,  202,  169,  159,  433,  129,

      160,  161,  170,  434,   62,  217,  171,  162,  582,  139,
      391,  203,  130,  218,  141,  131,  142,  142,  581,  392,
      143,  143,  143,  143,  143,  408,  223,  223,  409,   62,
      224,  224,  224,  224,  224,  140,  140,  140,  140,  140,
      226,  226,  403,  404,  227,  227,  227,  227,  227,  225,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      230,  580,  450,  579,  578,  297,  451,  310,  224,  224,
      224,  224,  224,  577,  225,  311,  231,  232,  298,  312,
      299,  313,  314,  576,  575,  315,  224,  224,  224,  224,
      224,  316,  316,  574,  573,  317,  317,  317,  317,  317,

      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      455,  572,  571,  570,  569,  568,  567,  566,  456,  565,
      564,  563,  562,  561,  560,  559,  558,  557,  556,  555,
      554,  553,  552,  551,  550,  549,  548,  547,  546,  545,
      544,  543,  542,  541,  540,  539,  538,  537,  536,  535,
      534,  533,  532,  531,  530,  529,  528,  527,  526,  525,
      524,  523,  522,  521,  520,  519,  518,  517,  516,  515,
      514,  513,  512,  511,  510,  509,  508,  507,  506,  505,
      504,  503,  502,  501,  500,  499,  498,  497,  496,  495,

      494,  493,  492,  491,  490,  489,  488,  487,  486,  485,
      484,  483,  482,  481,  480,  479,  478,  477,  476,  475,
      474,  473,  472,  471,  470,  469,  468,  467,  466,  465,
      464,  463,  462,  461,  460,  459,  458,  457,  454,  453,
      452,  449,  448,  447,  446,  445,  444,  443,  442,  441,
      440,  439,  438,  437,  436,  435,  432,  431,  430,  429,
      428,  427,  426,  425,  424,  423,  422,  421,  420,  419,
      418,  417,  416,  415,  414,  413,  412,  411,  410,  407,
      406,  405,  402,  401,  400,  399,  398,  397,  396,  395,
      394,  393,  390,  389,  388,  387,  386,  385,  384,  383,

      382,  381,  380,  379,  378,  377,  376,  375,  374,  373,
      372,  371,  370,  369,  368,  367,  366,  365,  364,  363,
      362,  361,  360,  359,  358,  357,  356,  355,  354,  351,
      350,  349,  348,  347,  346,  345,  344,  343,  342,  341,
      340,  339,  338,  337,  336,  335,  334,  333,  332,  331,
      330,  329,  328,  327,  326,  325,  324,  323,  322,  321,
      320,  319,  318,  309,  308,  307,  306,  305,  304,  303,
      302,  301,  300,  296,  295,  294,  293,  292,  291,  290,
      289,  288,  287,  286,  285,  284,  283,  282,  281,  280,
      279,  278,  277,  276,  275,  274,  273,  272,  271,  270,

      269,  268,  267,  266,  265,  264,  263,  262,  261,  260,
      259,  258,  257,  254,  253,  252,  251,  250,  249,  246,
      245,  244,  243,  242,  241,  240,  239,  238,  237,  236,
      235,  234,  233,  229,  228,  222,  221,  220,  219,  216,
      215,  214,  213,  212,  211,  210,  207,  206,  205,  204,
      201,  194,  193,  192,  191,  190,  189,  186,  185,  184,
      183,  182,  181,  180,  179,  178,  177,  176,  175,  174,
      173,  172,  168,  167,  166,  165,  164,  163,  158,  157,
      156,  153,  152,  151,  150,  147,  146,  145,  144,  138,
      137,  136,  135,  134,  133,  132,  108,  107,  100,   65,

       64,   63,   49,   48,   47,  584,    3,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584
    } ;

static yyconst short int yy_chk[782] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   12,   14,   13,   14,   14,   14,
       14,   14,   28,   34,   15,   29,   12,   13,   15,   16,
       30,   16,   16,   16,   16,   16,   22,   15,   23,   28,

       29,  275,  275,  585,   22,   16,   34,   30,   76,   23,
       22,   22,   22,   24,   30,   71,   76,   24,   23,   25,
       24,   24,   15,   25,   23,   26,   24,   26,   27,  121,
       16,   25,   33,   71,   25,  121,   33,   26,   27,   27,
       33,   27,   37,  112,   38,   33,  113,   27,   38,   37,
       37,  114,   37,   39,   39,   37,  114,   38,   37,  113,
       39,   39,  112,   38,   39,   39,   40,   40,  161,   39,
       55,   55,   55,   55,   55,   60,   60,   60,   60,   60,
      104,  161,   40,  168,   55,  582,  168,  104,   61,   60,
       61,   61,   61,   61,   61,  116,   87,   80,  377,   40,

       80,   80,   87,  377,   61,  131,   87,   80,  581,   55,
      326,  116,   40,  131,   60,   40,   62,   62,  577,  326,
       62,   62,   62,   62,   62,  343,  139,  139,  343,   61,
      139,  139,  139,  139,  139,  140,  140,  140,  140,  140,
      141,  141,  337,  337,  141,  141,  141,  141,  141,  140,
      142,  142,  142,  142,  142,  143,  143,  143,  143,  143,
      146,  576,  403,  575,  574,  211,  403,  222,  223,  223,
      223,  223,  223,  573,  140,  222,  146,  146,  211,  222,
      211,  222,  222,  572,  571,  222,  224,  224,  224,  224,
      224,  225,  225,  570,  568,  225,  225,  225,  225,  225,

      226,  226,  226,  226,  226,  227,  227,  227,  227,  227,
      316,  316,  316,  316,  316,  317,  317,  317,  317,  317,
      408,  567,  566,  565,  564,  563,  562,  561,  408,  560,
      558,  557,  556,  555,  554,  553,  552,  551,  550,  549,
      548,  547,  546,  542,  541,  540,  539,  538,  536,  535,
      534,  533,  531,  530,  529,  528,  526,  524,  523,  521,
      520,  517,  516,  514,  513,  512,  511,  509,  507,  506,
      505,  503,  502,  501,  499,  498,  497,  496,  494,  491,
      490,  488,  487,  486,  482,  481,  480,  479,  478,  477,
      476,  475,  473,  472,  471,  469,  468,  466,  465,  464,

      463,  462,  461,  460,  459,  458,  457,  456,  455,  454,
      452,  451,  449,  446,  445,  444,  443,  442,  440,  438,
      435,  434,  433,  432,  431,  430,  429,  427,  423,  422,
      419,  418,  416,  415,  412,  411,  410,  409,  407,  406,
      404,  402,  399,  398,  397,  396,  394,  393,  391,  389,
      388,  387,  384,  382,  380,  378,  375,  374,  373,  372,
      371,  370,  369,  367,  366,  365,  364,  363,  360,  358,
      357,  354,  353,  352,  350,  349,  347,  346,  344,  342,
      340,  338,  336,  335,  334,  333,  332,  331,  330,  329,
      328,  327,  325,  324,  323,  321,  320,  319,  318,  314,

      313,  311,  308,  307,  306,  305,  304,  301,  300,  299,
      298,  297,  295,  294,  291,  290,  289,  288,  286,  285,
      284,  283,  282,  281,  280,  279,  278,  277,  276,  273,
      271,  270,  269,  268,  267,  266,  264,  263,  262,  260,
      258,  256,  255,  254,  253,  251,  250,  248,  247,  246,
      245,  244,  243,  241,  238,  237,  236,  235,  234,  232,
      231,  230,  229,  221,  220,  219,  218,  217,  216,  215,
      214,  213,  212,  210,  209,  208,  207,  206,  205,  204,
      203,  202,  201,  200,  199,  198,  197,  196,  195,  194,
      193,  192,  191,  190,  189,  188,  187,  186,  185,  184,

      183,  182,  181,  180,  179,  178,  177,  176,  174,  173,
      172,  171,  169,  167,  166,  165,  164,  163,  162,  160,
      159,  158,  157,  156,  155,  154,  153,  152,  151,  150,
      149,  148,  147,  145,  144,  135,  134,  133,  132,  130,
      129,  128,  125,  124,  123,  122,  120,  119,  118,  117,
      115,  110,  109,  108,  107,  106,  105,  103,  102,  101,
      100,   99,   97,   96,   95,   94,   93,   92,   91,   90,
       89,   88,   86,   85,   84,   83,   82,   81,   79,   78,
       77,   75,   74,   73,   72,   70,   69,   68,   67,   54,
       46,   45,   44,   43,   42,   41,   36,   35,   32,   21,

       20,   19,   11,    9,    7,    3,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "Gmsh.l"
#define INITIAL 0
#line 2 "Gmsh.l"
// $Id: Gmsh.yy.cpp,v 1.259.2.2 2006-04-04 04:36:10 geuzaine Exp $
//
// Copyright (C) 1997-2006 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#include "Gmsh.h"
#include "Numeric.h"
#include "Geo.h"
#include "CAD.h"
#include "Gmsh.tab.hpp"

char yyname[256] = "";
int  yylineno = 1;
int  yyerrorstate = 0;

void   parsestring(char endchar);
char  *strsave(char *ptr);
void   skipcomments(void);
void   skipline(void);

#define YY_ALWAYS_INTERACTIVE 1

#define YY_INPUT(buf,result,max_size)					\
   if ( yy_current_buffer->yy_is_interactive )				\
     {									\
       int c = '*', n;							\
       for ( n = 0; n < max_size &&					\
	       (c = getc( yyin )) != EOF && c != '\n'; ++n )		\
	 buf[n] = (char) c;						\
       if ( c == '\n' ){						\
	 buf[n++] = (char) c;						\
	 yylineno++;							\
       }								\
       if ( c == EOF && ferror( yyin ) )				\
	 Msg(FATAL, "Input in flex scanner failed");			\
       result = n;							\
     }									\
   else if ( ((result = fread( buf, 1, max_size, yyin )) == 0)		\
	     && ferror( yyin ) )					\
     Msg(FATAL, "Input in flex scanner failed");

#line 793 "Gmsh.yy.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 81 "Gmsh.l"


#line 947 "Gmsh.yy.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 585 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 707 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 83 "Gmsh.l"
/* none */;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 84 "Gmsh.l"
return tEND;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 85 "Gmsh.l"
skipcomments();
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 86 "Gmsh.l"
skipline();
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 87 "Gmsh.l"
{parsestring('\"'); return tBIGSTR;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 88 "Gmsh.l"
{parsestring('\''); return tBIGSTR;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 89 "Gmsh.l"
{yylval.d = NEWREG(); return tDOUBLE;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 90 "Gmsh.l"
{yylval.d = NEWPOINT(); return tDOUBLE;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 91 "Gmsh.l"
{yylval.d = NEWLINE(); return tDOUBLE;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 92 "Gmsh.l"
{yylval.d = NEWLINE(); return tDOUBLE;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 93 "Gmsh.l"
{yylval.d = NEWLINELOOP(); return tDOUBLE;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 94 "Gmsh.l"
{yylval.d = NEWSURFACE(); return tDOUBLE;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 95 "Gmsh.l"
{yylval.d = NEWSURFACELOOP(); return tDOUBLE;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 96 "Gmsh.l"
{yylval.d = NEWVOLUME(); return tDOUBLE;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 97 "Gmsh.l"
return tAFFECT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 98 "Gmsh.l"
return tAFFECTPLUS;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 99 "Gmsh.l"
return tAFFECTMINUS;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 100 "Gmsh.l"
return tAFFECTTIMES;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 101 "Gmsh.l"
return tAFFECTDIVIDE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 102 "Gmsh.l"
return tDOTS;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 103 "Gmsh.l"
return tDOTS;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 104 "Gmsh.l"
return tCROSSPRODUCT;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 105 "Gmsh.l"
return tOR;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 106 "Gmsh.l"
return tAND;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 107 "Gmsh.l"
return tPLUSPLUS;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 108 "Gmsh.l"
return tMINUSMINUS;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 109 "Gmsh.l"
return tEQUAL;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 110 "Gmsh.l"
return tNOTEQUAL;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 111 "Gmsh.l"
return tAPPROXEQUAL;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 112 "Gmsh.l"
return tLESSOREQUAL;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 113 "Gmsh.l"
return tGREATEROREQUAL;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 115 "Gmsh.l"
return tAcos;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 116 "Gmsh.l"
return tAcos;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 117 "Gmsh.l"
return tAlias;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 118 "Gmsh.l"
return tAliasWithOptions;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 119 "Gmsh.l"
return tAsin;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 120 "Gmsh.l"
return tAsin;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 121 "Gmsh.l"
return tAtan;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 122 "Gmsh.l"
return tAtan;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 123 "Gmsh.l"
return tAtan2;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 124 "Gmsh.l"
return tAtan2;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 125 "Gmsh.l"
return tAttractor;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 127 "Gmsh.l"
return tBezier;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 128 "Gmsh.l"
return tBump;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 129 "Gmsh.l"
return tBSpline;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 130 "Gmsh.l"
return tBounds;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 131 "Gmsh.l"
return tBoundingBox;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 133 "Gmsh.l"
return tCeil;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 134 "Gmsh.l"
return tCombine;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 135 "Gmsh.l"
return tCosh;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 136 "Gmsh.l"
return tCos;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 137 "Gmsh.l"
return tCharacteristic;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 138 "Gmsh.l"
return tCircle;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 139 "Gmsh.l"
return tCoherence;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 140 "Gmsh.l"
return tComplex;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 141 "Gmsh.l"
return tColor;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 142 "Gmsh.l"
return tColorTable;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 143 "Gmsh.l"
return tSpline;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 144 "Gmsh.l"
return tCall;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 146 "Gmsh.l"
return tDelete;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 147 "Gmsh.l"
return tDilate;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 148 "Gmsh.l"
return tDuplicata;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 149 "Gmsh.l"
return tDraw;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 151 "Gmsh.l"
return tExp;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 152 "Gmsh.l"
return tEllipse;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 153 "Gmsh.l"
return tEllipse;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 154 "Gmsh.l"
return tExtrude;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 155 "Gmsh.l"
return tElliptic;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 156 "Gmsh.l"
return tEndFor;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 157 "Gmsh.l"
return tEndIf;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 158 "Gmsh.l"
return tExit;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 160 "Gmsh.l"
return tFabs;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 161 "Gmsh.l"
return tFloor;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 162 "Gmsh.l"
return tFmod;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 163 "Gmsh.l"
return tFor;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 164 "Gmsh.l"
return tFunction;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 166 "Gmsh.l"
return tGetValue;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 167 "Gmsh.l"
return tGMSH_MAJOR_VERSION;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 168 "Gmsh.l"
return tGMSH_MINOR_VERSION;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 169 "Gmsh.l"
return tGMSH_PATCH_VERSION;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 171 "Gmsh.l"
return tHide;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 172 "Gmsh.l"
return tHypot;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 174 "Gmsh.l"
return tIn;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 175 "Gmsh.l"
return tIf;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 176 "Gmsh.l"
return tIntersect;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 178 "Gmsh.l"
return tKnots;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 180 "Gmsh.l"
return tLength;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 181 "Gmsh.l"
return tLine;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 182 "Gmsh.l"
return tLoop;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 183 "Gmsh.l"
return tLog;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 184 "Gmsh.l"
return tLog10;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 185 "Gmsh.l"
return tLayers;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 187 "Gmsh.l"
return tModulo;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 188 "Gmsh.l"
return tMPI_Rank;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 189 "Gmsh.l"
return tMPI_Size;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 191 "Gmsh.l"
return tNurbs;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 193 "Gmsh.l"
return tOrder;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 195 "Gmsh.l"
return tPhysical;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 196 "Gmsh.l"
return tPi;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 197 "Gmsh.l"
return tPlane;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 198 "Gmsh.l"
return tPoint;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 199 "Gmsh.l"
return tProgression;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 200 "Gmsh.l"
return tProgression;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 201 "Gmsh.l"
return tParametric;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 202 "Gmsh.l"
return tPrintf;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 203 "Gmsh.l"
return tPlugin;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 205 "Gmsh.l"
return tRecombine;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 206 "Gmsh.l"
return tRotate;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 207 "Gmsh.l"
return tRuled;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 208 "Gmsh.l"
return tRand;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 209 "Gmsh.l"
return tReturn;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 211 "Gmsh.l"
return tSqrt;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 212 "Gmsh.l"
return tSin;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 213 "Gmsh.l"
return tSinh;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 214 "Gmsh.l"
return tSpline;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 215 "Gmsh.l"
return tSurface;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 216 "Gmsh.l"
return tSymmetry;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 217 "Gmsh.l"
return tSprintf;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 218 "Gmsh.l"
return tStrCat;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 219 "Gmsh.l"
return tStrPrefix;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 220 "Gmsh.l"
return tStrRelative;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 221 "Gmsh.l"
return tShow;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 223 "Gmsh.l"
return tTransfinite;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 224 "Gmsh.l"
return tTranslate;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 225 "Gmsh.l"
return tTanh;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 226 "Gmsh.l"
return tTan;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 227 "Gmsh.l"
return tTrimmed;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 228 "Gmsh.l"
return tToday;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 230 "Gmsh.l"
return tUsing;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 232 "Gmsh.l"
return tVolume;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 234 "Gmsh.l"
return tWith;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 236 "Gmsh.l"
return tText2D;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 237 "Gmsh.l"
return tText3D;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 238 "Gmsh.l"
return tInterpolationScheme;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 239 "Gmsh.l"
return tTime;
	YY_BREAK
case 136:
#line 242 "Gmsh.l"
case 137:
#line 243 "Gmsh.l"
case 138:
#line 244 "Gmsh.l"
case 139:
YY_RULE_SETUP
#line 244 "Gmsh.l"
{yylval.d = atof((char *)yytext); return tDOUBLE;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 246 "Gmsh.l"
{yylval.c = strsave((char*)yytext); return tSTRING;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 248 "Gmsh.l"
return yytext[0];
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 250 "Gmsh.l"
ECHO;
	YY_BREAK
#line 1731 "Gmsh.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 585 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 585 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 584);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 250 "Gmsh.l"


#undef yywrap

int yywrap() {return 1;}

void skipcomments(void){
  int c;

  while (1) {
    while ((c = yyinput()) != '*'){
      if(c == EOF){
        Msg(GERROR, "End of file in commented region");
        return;
      }
    }
    if ((c = yyinput()) == '/')
      return;
    unput(c);
  }
}

void parsestring(char endchar){
  int c;
  char tmp[1024];
  
  // Note that we keep special characters (end-of-line \n, tabs \t,
  // etc.) "as is" in the output string: see yyinput() above
  int i = 0;
  while ((c = yyinput()) != endchar) {
    if(c == EOF){
      Msg(GERROR, "End of file in string");
      break;
    }
    else if(i >= (int)sizeof(tmp)-1){
      Msg(GERROR, "String too long");
      break;
    }
    else{
      tmp[i++] = (char)c;
    }
  }
  tmp[i] = '\0';
  yylval.c = strsave(tmp);
}

char *strsave(char *ptr){
  return((char*)strcpy((char*)malloc(strlen(ptr)+1),ptr));
}

void skipline(void){
  int c;
  while ((c = yyinput()) != '\n'){
    if(c == EOF) return;
  }
}

void skip_until(char *skip, char *until){
  int i, nb_skip;
  int l, l_skip, l_until;
  char chars[256];

  nb_skip = 0;

  if(skip)
    l_skip = strlen(skip);
  else
    l_skip = 0;

  l_until = strlen(until);

  while(1){
    while (1){
      chars[0] = yyinput();
      if(chars[0] == (char)EOF){
        Msg(GERROR, "Unexpected end of file");
	return;
      }
      if(chars[0] == until[0]) break;
      if(skip && chars[0] == skip[0]) break;
    }

    l = MAX(l_skip,l_until);
    if(l >= (int)sizeof(chars)){
      Msg(GERROR, "Search pattern too long in skip_until");
      return;
    }
    for(i=1; i<l; i++){
      chars[i] = yyinput();
      if(chars[i] == (char)EOF){
	l = i;
	break;
      }
    }

    if(!strncmp(chars,until,l_until)){
      if(!nb_skip){
	return;
      }
      else{
	nb_skip--;
      }
    }
    else if(skip && !strncmp(chars,skip,l_skip)){
      nb_skip++;
    }
    else{
      for(i=1;i<l-1;i++){
	unput(chars[l-i]);
      }
    }

  }
}

void force_yyflush() { YY_FLUSH_BUFFER; }
