
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tStrRelative	291
#define	tBoundingBox	292
#define	tDraw	293
#define	tToday	294
#define	tPoint	295
#define	tCircle	296
#define	tEllipse	297
#define	tLine	298
#define	tSurface	299
#define	tSpline	300
#define	tVolume	301
#define	tCharacteristic	302
#define	tLength	303
#define	tParametric	304
#define	tElliptic	305
#define	tPlane	306
#define	tRuled	307
#define	tTransfinite	308
#define	tComplex	309
#define	tPhysical	310
#define	tUsing	311
#define	tBump	312
#define	tProgression	313
#define	tPlugin	314
#define	tRotate	315
#define	tTranslate	316
#define	tSymmetry	317
#define	tDilate	318
#define	tExtrude	319
#define	tDuplicata	320
#define	tLoop	321
#define	tRecombine	322
#define	tDelete	323
#define	tCoherence	324
#define	tIntersect	325
#define	tAttractor	326
#define	tLayers	327
#define	tAlias	328
#define	tAliasWithOptions	329
#define	tText2D	330
#define	tText3D	331
#define	tInterpolationScheme	332
#define	tTime	333
#define	tCombine	334
#define	tBSpline	335
#define	tBezier	336
#define	tNurbs	337
#define	tOrder	338
#define	tWith	339
#define	tBounds	340
#define	tKnots	341
#define	tColor	342
#define	tColorTable	343
#define	tFor	344
#define	tIn	345
#define	tEndFor	346
#define	tIf	347
#define	tEndIf	348
#define	tExit	349
#define	tReturn	350
#define	tCall	351
#define	tFunction	352
#define	tTrimmed	353
#define	tShow	354
#define	tHide	355
#define	tGetValue	356
#define	tGMSH_MAJOR_VERSION	357
#define	tGMSH_MINOR_VERSION	358
#define	tGMSH_PATCH_VERSION	359
#define	tAFFECTPLUS	360
#define	tAFFECTMINUS	361
#define	tAFFECTTIMES	362
#define	tAFFECTDIVIDE	363
#define	tOR	364
#define	tAND	365
#define	tEQUAL	366
#define	tNOTEQUAL	367
#define	tAPPROXEQUAL	368
#define	tLESSOREQUAL	369
#define	tGREATEROREQUAL	370
#define	tCROSSPRODUCT	371
#define	tPLUSPLUS	372
#define	tMINUSMINUS	373
#define	UNARYPREC	374

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.260.2.2 2006-04-04 04:36:09 geuzaine Exp $
//
// Copyright (C) 1997-2006 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "GeoUtils.h"
#include "Nurbs.h"
#include "CAD.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "OS.h"
#include "CreateFile.h"
#include "Visibility.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static ExtrudeParams extr;

static Post_View *View;
static List_T *ViewValueList;
static double ViewCoord[100];
static int *ViewNumList, ViewNumNodes, ViewNumComp, ViewNumListTmp;
static int ViewCoordIdx, ViewElementIdx;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 77 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1178
#define	YYFLAG		-32768
#define	YYNTBASE	140

#define YYTRANSLATE(x) ((unsigned)(x) <= 374 ? yytranslate[x] : 203)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   126,     2,   136,     2,   124,     2,     2,   131,
   132,   122,   120,   137,   121,   135,   123,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   116,
     2,   118,   110,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   133,     2,   134,   130,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   138,     2,   139,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   111,   112,   113,   114,   115,   117,   119,
   125,   127,   128,   129
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     6,     9,    11,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    43,
    51,    58,    67,    68,    71,    74,    77,    80,    83,    85,
    89,    91,    95,    96,    97,   108,   110,   114,   115,   129,
   131,   135,   136,   152,   161,   162,   169,   171,   173,   175,
   177,   179,   181,   183,   188,   196,   206,   213,   220,   224,
   231,   238,   248,   255,   265,   271,   280,   289,   301,   308,
   318,   328,   338,   346,   355,   368,   375,   383,   391,   399,
   409,   417,   427,   445,   453,   461,   473,   482,   495,   504,
   513,   522,   535,   558,   579,   588,   597,   606,   614,   623,
   629,   641,   647,   657,   659,   661,   663,   664,   667,   674,
   681,   688,   695,   700,   707,   714,   721,   726,   733,   737,
   742,   748,   752,   756,   761,   766,   770,   778,   786,   790,
   798,   802,   805,   808,   824,   827,   834,   843,   852,   863,
   865,   868,   870,   874,   879,   881,   887,   899,   913,   914,
   922,   923,   937,   938,   954,   963,   972,   981,   994,  1007,
  1020,  1035,  1050,  1065,  1066,  1079,  1080,  1093,  1094,  1107,
  1108,  1125,  1126,  1143,  1144,  1161,  1162,  1181,  1182,  1201,
  1202,  1221,  1223,  1226,  1236,  1244,  1247,  1254,  1264,  1274,
  1283,  1293,  1302,  1311,  1318,  1323,  1326,  1329,  1331,  1335,
  1338,  1341,  1344,  1348,  1352,  1356,  1360,  1364,  1368,  1372,
  1376,  1380,  1384,  1388,  1392,  1396,  1400,  1406,  1411,  1416,
  1421,  1426,  1431,  1436,  1441,  1446,  1451,  1456,  1463,  1468,
  1473,  1478,  1483,  1488,  1493,  1500,  1507,  1514,  1519,  1524,
  1529,  1534,  1539,  1544,  1549,  1554,  1559,  1564,  1569,  1576,
  1581,  1586,  1591,  1596,  1601,  1606,  1613,  1620,  1627,  1632,
  1634,  1636,  1638,  1640,  1642,  1644,  1646,  1648,  1653,  1658,
  1661,  1667,  1671,  1678,  1683,  1691,  1698,  1700,  1703,  1706,
  1710,  1714,  1726,  1736,  1744,  1752,  1753,  1757,  1761,  1763,
  1767,  1769,  1771,  1774,  1778,  1783,  1787,  1793,  1798,  1800,
  1802,  1804,  1808,  1813,  1820,  1828,  1830,  1832,  1836,  1840,
  1850,  1858,  1860,  1866,  1870,  1877,  1879,  1883,  1885,  1887,
  1894,  1899,  1904,  1909,  1916,  1923
};

static const short yyrhs[] = {   141,
     0,     1,     6,     0,     0,   141,   142,     0,   144,     0,
   143,     0,   162,     0,   163,     0,   164,     0,   167,     0,
   168,     0,   169,     0,   170,     0,   173,     0,   188,     0,
   189,     0,   172,     0,   171,     0,    33,   131,     5,   132,
     6,     0,    33,   131,     5,   137,   198,   132,     6,     0,
     4,     5,   138,   145,   139,     6,     0,     4,     5,     4,
   192,   138,   145,   139,     6,     0,     0,   145,   148,     0,
   145,   152,     0,   145,   155,     0,   145,   157,     0,   145,
   158,     0,   190,     0,   146,   137,   190,     0,   190,     0,
   147,   137,   190,     0,     0,     0,     4,   149,   131,   146,
   132,   150,   138,   147,   139,     6,     0,   202,     0,   151,
   137,   202,     0,     0,    76,   131,   190,   137,   190,   137,
   190,   132,   153,   138,   151,   139,     6,     0,   202,     0,
   154,   137,   202,     0,     0,    77,   131,   190,   137,   190,
   137,   190,   137,   190,   132,   156,   138,   154,   139,     6,
     0,    78,   138,   195,   139,   138,   195,   139,     6,     0,
     0,    79,   159,   138,   147,   139,     6,     0,     7,     0,
   106,     0,   107,     0,   108,     0,   109,     0,   127,     0,
   128,     0,     4,   160,   190,     6,     0,     4,   133,   190,
   134,   160,   190,     6,     0,     4,   133,   138,   198,   139,
   134,   160,   196,     6,     0,     4,   133,   134,     7,   196,
     6,     0,     4,   133,   134,   106,   196,     6,     0,     4,
   161,     6,     0,     4,   133,   190,   134,   161,     6,     0,
     4,   135,     4,     7,   202,     6,     0,     4,   133,   190,
   134,   135,     4,     7,   202,     6,     0,     4,   135,     4,
   160,   190,     6,     0,     4,   133,   190,   134,   135,     4,
   160,   190,     6,     0,     4,   135,     4,   161,     6,     0,
     4,   133,   190,   134,   135,     4,   161,     6,     0,     4,
   135,    88,   135,     4,     7,   199,     6,     0,     4,   133,
   190,   134,   135,    88,   135,     4,     7,   199,     6,     0,
     4,   135,    89,     7,   200,     6,     0,     4,   133,   190,
   134,   135,    89,     7,   200,     6,     0,    60,   131,     4,
   132,   135,     4,     7,   190,     6,     0,    60,   131,     4,
   132,   135,     4,     7,   202,     6,     0,    41,   131,   190,
   132,     7,   192,     6,     0,    56,    41,   131,   190,   132,
     7,   196,     6,     0,    72,    41,   196,     7,   138,   190,
   137,   190,   137,   190,   139,     6,     0,    48,    49,   196,
     7,   190,     6,     0,    44,   131,   190,   132,     7,   196,
     6,     0,    46,   131,   190,   132,     7,   196,     6,     0,
    42,   131,   190,   132,     7,   196,     6,     0,    42,   131,
   190,   132,     7,   196,    52,   192,     6,     0,    43,   131,
   190,   132,     7,   196,     6,     0,    43,   131,   190,   132,
     7,   196,    52,   192,     6,     0,    50,   131,   190,   132,
     7,   138,   190,   137,   190,   137,     5,   137,     5,   137,
     5,   139,     6,     0,    81,   131,   190,   132,     7,   196,
     6,     0,    82,   131,   190,   132,     7,   196,     6,     0,
    83,   131,   190,   132,     7,   196,    87,   196,    84,   190,
     6,     0,    44,    67,   131,   190,   132,     7,   196,     6,
     0,    72,    44,   196,     7,   138,   190,   137,   190,   137,
   190,   139,     6,     0,    56,    44,   131,   190,   132,     7,
   196,     6,     0,    52,    45,   131,   190,   132,     7,   196,
     6,     0,    53,    45,   131,   190,   132,     7,   196,     6,
     0,    99,    45,   131,   190,   132,     7,   138,   190,   137,
   196,   139,     6,     0,    83,    45,    85,    86,   131,   190,
   132,     7,   194,    87,   138,   196,   137,   196,   139,    84,
   138,   190,   137,   190,   139,     6,     0,    83,    45,   131,
   190,   132,     7,   194,    87,   138,   196,   137,   196,   139,
    84,   138,   190,   137,   190,   139,     6,     0,    45,    67,
   131,   190,   132,     7,   196,     6,     0,    56,    45,   131,
   190,   132,     7,   196,     6,     0,    55,    47,   131,   190,
   132,     7,   196,     6,     0,    47,   131,   190,   132,     7,
   196,     6,     0,    56,    47,   131,   190,   132,     7,   196,
     6,     0,    62,   192,   138,   165,   139,     0,    61,   138,
   192,   137,   192,   137,   190,   139,   138,   165,   139,     0,
    63,   192,   138,   165,   139,     0,    64,   138,   192,   137,
   190,   139,   138,   165,   139,     0,   167,     0,   166,     0,
   164,     0,     0,   166,   163,     0,   166,    41,   138,   198,
   139,     6,     0,   166,    44,   138,   198,   139,     6,     0,
   166,    45,   138,   198,   139,     6,     0,   166,    47,   138,
   198,   139,     6,     0,    66,   138,   166,   139,     0,    66,
     4,   133,   190,   134,     6,     0,    74,     4,   133,   190,
   134,     6,     0,    75,     4,   133,   190,   134,     6,     0,
    69,   138,   166,   139,     0,    69,     4,   133,   190,   134,
     6,     0,    69,     4,     6,     0,    69,     4,     4,     6,
     0,    88,   199,   138,   166,   139,     0,   100,   202,     6,
     0,   101,   202,     6,     0,   100,   138,   166,   139,     0,
   101,   138,   166,   139,     0,     4,   202,     6,     0,     4,
     4,   133,   190,   134,   202,     6,     0,     4,     4,     4,
   133,   190,   134,     6,     0,     4,   190,     6,     0,    60,
   131,     4,   132,   135,     4,     6,     0,    80,     4,     6,
     0,    95,     6,     0,    38,     6,     0,    38,   138,   190,
   137,   190,   137,   190,   137,   190,   137,   190,   137,   190,
   139,     6,     0,    39,     6,     0,    90,   131,   190,     8,
   190,   132,     0,    90,   131,   190,     8,   190,     8,   190,
   132,     0,    90,     4,    91,   138,   190,     8,   190,   139,
     0,    90,     4,    91,   138,   190,     8,   190,     8,   190,
   139,     0,    92,     0,    98,     4,     0,    96,     0,    97,
     4,     6,     0,    93,   131,   190,   132,     0,    94,     0,
    65,   192,   138,   166,   139,     0,    65,   138,   192,   137,
   192,   137,   190,   139,   138,   166,   139,     0,    65,   138,
   192,   137,   192,   137,   192,   137,   190,   139,   138,   166,
   139,     0,     0,    65,   192,   138,   166,   174,   186,   139,
     0,     0,    65,   138,   192,   137,   192,   137,   190,   139,
   138,   166,   175,   186,   139,     0,     0,    65,   138,   192,
   137,   192,   137,   192,   137,   190,   139,   138,   166,   176,
   186,   139,     0,    65,    41,   138,   190,   137,   192,   139,
     6,     0,    65,    44,   138,   190,   137,   192,   139,     6,
     0,    65,    45,   138,   190,   137,   192,   139,     6,     0,
    65,    41,   138,   190,   137,   192,   137,   192,   137,   190,
   139,     6,     0,    65,    44,   138,   190,   137,   192,   137,
   192,   137,   190,   139,     6,     0,    65,    45,   138,   190,
   137,   192,   137,   192,   137,   190,   139,     6,     0,    65,
    41,   138,   190,   137,   192,   137,   192,   137,   192,   137,
   190,   139,     6,     0,    65,    44,   138,   190,   137,   192,
   137,   192,   137,   192,   137,   190,   139,     6,     0,    65,
    45,   138,   190,   137,   192,   137,   192,   137,   192,   137,
   190,   139,     6,     0,     0,    65,    41,   138,   190,   137,
   192,   139,   177,   138,   186,   139,     6,     0,     0,    65,
    44,   138,   190,   137,   192,   139,   178,   138,   186,   139,
     6,     0,     0,    65,    45,   138,   190,   137,   192,   139,
   179,   138,   186,   139,     6,     0,     0,    65,    41,   138,
   190,   137,   192,   137,   192,   137,   190,   139,   180,   138,
   186,   139,     6,     0,     0,    65,    44,   138,   190,   137,
   192,   137,   192,   137,   190,   139,   181,   138,   186,   139,
     6,     0,     0,    65,    45,   138,   190,   137,   192,   137,
   192,   137,   190,   139,   182,   138,   186,   139,     6,     0,
     0,    65,    41,   138,   190,   137,   192,   137,   192,   137,
   192,   137,   190,   139,   183,   138,   186,   139,     6,     0,
     0,    65,    44,   138,   190,   137,   192,   137,   192,   137,
   192,   137,   190,   139,   184,   138,   186,   139,     6,     0,
     0,    65,    45,   138,   190,   137,   192,   137,   192,   137,
   192,   137,   190,   139,   185,   138,   186,   139,     6,     0,
   187,     0,   186,   187,     0,    73,   138,   196,   137,   196,
   137,   196,   139,     6,     0,    73,   138,   196,   137,   196,
   139,     6,     0,    68,     6,     0,    54,    44,   196,     7,
   190,     6,     0,    54,    44,   196,     7,   190,    57,    59,
   190,     6,     0,    54,    44,   196,     7,   190,    57,    58,
   190,     6,     0,    54,    45,   138,   190,   139,     7,   196,
     6,     0,    54,    45,   138,   190,   139,     7,   196,     4,
     6,     0,    51,    45,   138,   190,   139,     7,   196,     6,
     0,    54,    47,   138,   190,   139,     7,   196,     6,     0,
    68,    45,   196,     7,   190,     6,     0,    68,    45,   196,
     6,     0,    70,     6,     0,    71,     6,     0,   191,     0,
   131,   190,   132,     0,   121,   190,     0,   120,   190,     0,
   126,   190,     0,   190,   121,   190,     0,   190,   120,   190,
     0,   190,   122,   190,     0,   190,   123,   190,     0,   190,
   124,   190,     0,   190,   130,   190,     0,   190,   116,   190,
     0,   190,   118,   190,     0,   190,   117,   190,     0,   190,
   119,   190,     0,   190,   113,   190,     0,   190,   114,   190,
     0,   190,   112,   190,     0,   190,   111,   190,     0,   190,
   110,   190,     8,   190,     0,    12,   131,   190,   132,     0,
    13,   131,   190,   132,     0,    14,   131,   190,   132,     0,
    15,   131,   190,   132,     0,    16,   131,   190,   132,     0,
    17,   131,   190,   132,     0,    18,   131,   190,   132,     0,
    19,   131,   190,   132,     0,    20,   131,   190,   132,     0,
    22,   131,   190,   132,     0,    23,   131,   190,   137,   190,
   132,     0,    24,   131,   190,   132,     0,    25,   131,   190,
   132,     0,    26,   131,   190,   132,     0,    27,   131,   190,
   132,     0,    28,   131,   190,   132,     0,    29,   131,   190,
   132,     0,    30,   131,   190,   137,   190,   132,     0,    31,
   131,   190,   137,   190,   132,     0,    32,   131,   190,   137,
   190,   132,     0,    21,   131,   190,   132,     0,    12,   133,
   190,   134,     0,    13,   133,   190,   134,     0,    14,   133,
   190,   134,     0,    15,   133,   190,   134,     0,    16,   133,
   190,   134,     0,    17,   133,   190,   134,     0,    18,   133,
   190,   134,     0,    19,   133,   190,   134,     0,    20,   133,
   190,   134,     0,    22,   133,   190,   134,     0,    23,   133,
   190,   137,   190,   134,     0,    24,   133,   190,   134,     0,
    25,   133,   190,   134,     0,    26,   133,   190,   134,     0,
    27,   133,   190,   134,     0,    28,   133,   190,   134,     0,
    29,   133,   190,   134,     0,    30,   133,   190,   137,   190,
   134,     0,    31,   133,   190,   137,   190,   134,     0,    32,
   133,   190,   137,   190,   134,     0,    21,   133,   190,   134,
     0,     3,     0,     9,     0,    10,     0,    11,     0,   103,
     0,   104,     0,   105,     0,     4,     0,     4,   133,   190,
   134,     0,   136,     4,   133,   134,     0,     4,   161,     0,
     4,   133,   190,   134,   161,     0,     4,   135,     4,     0,
     4,   133,   190,   134,   135,     4,     0,     4,   135,     4,
   161,     0,     4,   133,   190,   134,   135,     4,   161,     0,
   102,   131,     5,   137,   190,   132,     0,   193,     0,   121,
   192,     0,   120,   192,     0,   192,   121,   192,     0,   192,
   120,   192,     0,   138,   190,   137,   190,   137,   190,   137,
   190,   137,   190,   139,     0,   138,   190,   137,   190,   137,
   190,   137,   190,   139,     0,   138,   190,   137,   190,   137,
   190,   139,     0,   131,   190,   137,   190,   137,   190,   132,
     0,     0,   138,   195,   139,     0,   131,   195,   132,     0,
   196,     0,   195,   137,   196,     0,   190,     0,   197,     0,
   138,   139,     0,   138,   198,   139,     0,   121,   138,   198,
   139,     0,   190,     8,   190,     0,   190,     8,   190,     8,
   190,     0,    41,   138,   190,   139,     0,   164,     0,   167,
     0,   173,     0,     4,   133,   134,     0,   121,     4,   133,
   134,     0,     4,   133,   138,   198,   139,   134,     0,   121,
     4,   133,   138,   198,   139,   134,     0,   190,     0,   197,
     0,   198,   137,   190,     0,   198,   137,   197,     0,   138,
   190,   137,   190,   137,   190,   137,   190,   139,     0,   138,
   190,   137,   190,   137,   190,   139,     0,     4,     0,     4,
   135,    88,   135,     4,     0,   138,   201,   139,     0,     4,
   133,   190,   134,   135,    89,     0,   199,     0,   201,   137,
   199,     0,     5,     0,    40,     0,    35,   131,   202,   137,
   202,   132,     0,    36,   131,   202,   132,     0,    37,   131,
   202,   132,     0,    34,   131,   202,   132,     0,    34,   131,
   202,   137,   198,   132,     0,    34,   131,     4,   135,     4,
   132,     0,    34,   131,     4,   133,   190,   134,   135,     4,
   132,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   142,   144,   149,   151,   154,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   171,   177,
   194,   202,   211,   219,   220,   221,   222,   223,   226,   229,
   233,   236,   240,   431,   449,   459,   465,   472,   480,   486,
   492,   499,   507,   513,   521,   526,   533,   535,   536,   537,
   538,   541,   543,   546,   581,   620,   674,   691,   709,   720,
   739,   753,   770,   796,   823,   837,   854,   868,   885,   905,
   928,   938,   953,   973,   989,  1008,  1027,  1045,  1063,  1081,
  1107,  1125,  1151,  1171,  1195,  1219,  1245,  1262,  1280,  1299,
  1318,  1357,  1382,  1401,  1420,  1436,  1456,  1473,  1490,  1510,
  1516,  1521,  1526,  1533,  1535,  1536,  1539,  1544,  1548,  1564,
  1580,  1596,  1616,  1631,  1637,  1643,  1654,  1664,  1674,  1688,
  1706,  1720,  1729,  1735,  1746,  1759,  1804,  1819,  1830,  1849,
  1859,  1881,  1885,  1890,  1895,  1906,  1923,  1939,  1965,  1992,
  2024,  2031,  2036,  2042,  2046,  2054,  2063,  2071,  2079,  2084,
  2092,  2097,  2105,  2110,  2120,  2127,  2134,  2141,  2148,  2155,
  2162,  2169,  2176,  2183,  2188,  2195,  2200,  2207,  2212,  2219,
  2224,  2231,  2236,  2243,  2248,  2255,  2260,  2267,  2272,  2279,
  2284,  2294,  2298,  2303,  2330,  2354,  2362,  2381,  2399,  2417,
  2446,  2481,  2508,  2535,  2549,  2567,  2572,  2581,  2583,  2584,
  2585,  2586,  2587,  2588,  2589,  2590,  2597,  2598,  2599,  2600,
  2601,  2602,  2603,  2604,  2605,  2606,  2607,  2608,  2609,  2610,
  2611,  2612,  2613,  2614,  2615,  2616,  2617,  2618,  2619,  2620,
  2621,  2622,  2623,  2624,  2625,  2626,  2627,  2628,  2630,  2631,
  2632,  2633,  2634,  2635,  2636,  2637,  2638,  2639,  2640,  2641,
  2642,  2643,  2644,  2645,  2646,  2647,  2648,  2649,  2650,  2655,
  2660,  2661,  2662,  2663,  2664,  2665,  2669,  2682,  2702,  2716,
  2729,  2752,  2770,  2788,  2806,  2824,  2831,  2836,  2840,  2844,
  2848,  2854,  2859,  2863,  2867,  2873,  2877,  2881,  2887,  2893,
  2900,  2906,  2910,  2915,  2919,  2930,  2937,  2948,  2968,  2978,
  2988,  2998,  3015,  3034,  3058,  3086,  3092,  3096,  3100,  3112,
  3117,  3129,  3136,  3157,  3162,  3176,  3182,  3188,  3193,  3201,
  3209,  3223,  3237,  3241,  3260,  3282
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tStrRelative","tBoundingBox",
"tDraw","tToday","tPoint","tCircle","tEllipse","tLine","tSurface","tSpline",
"tVolume","tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled",
"tTransfinite","tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin",
"tRotate","tTranslate","tSymmetry","tDilate","tExtrude","tDuplicata","tLoop",
"tRecombine","tDelete","tCoherence","tIntersect","tAttractor","tLayers","tAlias",
"tAliasWithOptions","tText2D","tText3D","tInterpolationScheme","tTime","tCombine",
"tBSpline","tBezier","tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tColorTable",
"tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction",
"tTrimmed","tShow","tHide","tGetValue","tGMSH_MAJOR_VERSION","tGMSH_MINOR_VERSION",
"tGMSH_PATCH_VERSION","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE",
"'?'","tOR","tAND","tEQUAL","tNOTEQUAL","tAPPROXEQUAL","'<'","tLESSOREQUAL",
"'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT","'!'",
"tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'","'['","']'","'.'","'#'",
"','","'{'","'}'","All","GeoFormatItems","GeoFormatItem","Printf","View","Views",
"ElementCoords","ElementValues","Element","@1","@2","Text2DValues","Text2D",
"@3","Text3DValues","Text3D","@4","InterpolationMatrix","Time","@5","NumericAffectation",
"NumericIncrement","Affectation","Shape","Transform","MultipleShape","ListOfShapes",
"Duplicata","Delete","Colorify","Visibility","Command","Loop","Extrude","@6",
"@7","@8","@9","@10","@11","@12","@13","@14","@15","@16","@17","ExtrudeParameters",
"ExtrudeParameter","Transfinite","Coherence","FExpr","FExpr_Single","VExpr",
"VExpr_Single","ListOfListOfDouble","RecursiveListOfListOfDouble","ListOfDouble",
"FExpr_Multi","RecursiveListOfDouble","ColorExpr","ListOfColor","RecursiveListOfColor",
"StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   140,   140,   141,   141,   142,   142,   142,   142,   142,   142,
   142,   142,   142,   142,   142,   142,   142,   142,   143,   143,
   144,   144,   145,   145,   145,   145,   145,   145,   146,   146,
   147,   147,   149,   150,   148,   151,   151,   153,   152,   154,
   154,   156,   155,   157,   159,   158,   160,   160,   160,   160,
   160,   161,   161,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   164,
   164,   164,   164,   165,   165,   165,   166,   166,   166,   166,
   166,   166,   167,   167,   167,   167,   168,   168,   168,   168,
   169,   170,   170,   170,   170,   171,   171,   171,   171,   171,
   171,   171,   171,   171,   171,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   172,   173,   173,   173,   174,   173,
   175,   173,   176,   173,   173,   173,   173,   173,   173,   173,
   173,   173,   173,   177,   173,   178,   173,   179,   173,   180,
   173,   181,   173,   182,   173,   183,   173,   184,   173,   185,
   173,   186,   186,   187,   187,   187,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   189,   189,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   192,   192,   192,   192,
   192,   193,   193,   193,   193,   194,   194,   194,   195,   195,
   196,   196,   196,   196,   196,   197,   197,   197,   197,   197,
   197,   197,   197,   197,   197,   198,   198,   198,   198,   199,
   199,   199,   199,   200,   200,   201,   201,   202,   202,   202,
   202,   202,   202,   202,   202,   202
};

static const short yyr2[] = {     0,
     1,     2,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     5,     7,
     6,     8,     0,     2,     2,     2,     2,     2,     1,     3,
     1,     3,     0,     0,    10,     1,     3,     0,    13,     1,
     3,     0,    15,     8,     0,     6,     1,     1,     1,     1,
     1,     1,     1,     4,     7,     9,     6,     6,     3,     6,
     6,     9,     6,     9,     5,     8,     8,    11,     6,     9,
     9,     9,     7,     8,    12,     6,     7,     7,     7,     9,
     7,     9,    17,     7,     7,    11,     8,    12,     8,     8,
     8,    12,    22,    20,     8,     8,     8,     7,     8,     5,
    11,     5,     9,     1,     1,     1,     0,     2,     6,     6,
     6,     6,     4,     6,     6,     6,     4,     6,     3,     4,
     5,     3,     3,     4,     4,     3,     7,     7,     3,     7,
     3,     2,     2,    15,     2,     6,     8,     8,    10,     1,
     2,     1,     3,     4,     1,     5,    11,    13,     0,     7,
     0,    13,     0,    15,     8,     8,     8,    12,    12,    12,
    14,    14,    14,     0,    12,     0,    12,     0,    12,     0,
    16,     0,    16,     0,    16,     0,    18,     0,    18,     0,
    18,     1,     2,     9,     7,     2,     6,     9,     9,     8,
     9,     8,     8,     6,     4,     2,     2,     1,     3,     2,
     2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     5,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     6,     4,     4,
     4,     4,     4,     4,     6,     6,     6,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     6,     4,
     4,     4,     4,     4,     4,     6,     6,     6,     4,     1,
     1,     1,     1,     1,     1,     1,     1,     4,     4,     2,
     5,     3,     6,     4,     7,     6,     1,     2,     2,     3,
     3,    11,     9,     7,     7,     0,     3,     3,     1,     3,
     1,     1,     2,     3,     4,     3,     5,     4,     1,     1,
     1,     3,     4,     6,     7,     1,     1,     3,     3,     9,
     7,     1,     5,     3,     6,     1,     3,     1,     1,     6,
     4,     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     1,     2,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   140,     0,   145,     0,   142,     0,     0,     0,
     0,     0,     4,     6,     5,     7,     8,     9,    10,    11,
    12,    13,    18,    17,    14,    15,    16,   260,   267,   318,
    47,   261,   262,   263,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   319,
     0,   264,   265,   266,    48,    49,    50,    51,     0,     0,
     0,    52,    53,     0,     0,     0,     0,     0,     0,     0,
   198,     0,     0,   133,     0,   135,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   277,     0,     0,     0,     0,     0,
     0,     0,     0,   107,     0,     0,   107,   196,   197,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   312,     0,
     0,     0,     0,     0,   132,     0,   141,     0,   318,   107,
     0,   107,     0,     0,     0,     0,   270,     0,    23,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   267,   201,   200,   202,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    59,
   129,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   126,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   267,     0,     0,
     0,   299,   300,   301,   291,     0,   292,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   279,   278,     0,     0,     0,     0,   107,   107,     0,
     0,     0,     0,     0,     0,     0,     0,   107,     0,     0,
     0,     0,   119,     0,     0,     0,     0,     0,     0,   131,
     0,     0,     0,     0,     0,     0,     0,   107,     0,     0,
     0,   143,     0,     0,   122,     0,   123,     0,     0,   272,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   199,     0,     0,     0,   306,   307,     0,     0,    47,
     0,     0,     0,     0,     0,    54,     0,   216,   215,   213,
   214,   209,   211,   210,   212,   204,   203,   205,   206,   207,
   208,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   267,     0,   293,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   281,   280,   106,     0,
   105,   104,     0,     0,     0,     0,     0,     0,     0,   149,
     0,     0,     0,     0,     0,   113,   108,   195,     0,   120,
     0,   117,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   144,     0,   124,   125,
     0,   268,   274,    23,    33,     0,     0,     0,    45,     0,
    24,    25,    26,    27,    28,   218,   239,   219,   240,   220,
   241,   221,   242,   222,   243,   223,   244,   224,   245,   225,
   246,   226,   247,   238,   259,   227,   248,     0,     0,   229,
   250,   230,   251,   231,   252,   232,   253,   233,   254,   234,
   255,     0,     0,     0,     0,     0,     0,     0,     0,   323,
     0,     0,   321,   322,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    65,     0,     0,     0,     0,
   269,     0,    19,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   302,     0,     0,     0,     0,   294,   296,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   100,   102,     0,
     0,     0,     0,     0,   146,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   121,     0,     0,     0,     0,     0,
   271,     0,     0,     0,     0,     0,     0,     0,    21,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   268,    57,    58,   308,   309,     0,     0,     0,
     0,     0,    60,    61,    63,     0,     0,   316,     0,    69,
   217,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   298,   303,     0,   295,     0,    76,     0,     0,
     0,     0,   187,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   182,   114,     0,     0,     0,     0,   194,
   118,     0,     0,   115,   116,     0,     0,     0,   286,     0,
   313,     0,     0,     0,   136,     0,   128,   273,   127,     0,
     0,     0,     0,     0,   289,     0,   228,   249,   235,   256,
   236,   257,   237,   258,     0,   325,   324,   320,   276,     0,
    47,     0,     0,     0,     0,    55,     0,     0,     0,   314,
    20,     0,    73,    79,     0,    81,     0,     0,    77,     0,
    78,    98,     0,     0,   297,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   130,     0,
     0,     0,     0,   107,     0,   164,     0,   166,     0,   168,
     0,     0,   186,     0,   150,   183,     0,     0,     0,     0,
     0,     0,    84,    85,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   275,    22,     0,    29,     0,     0,     0,
     0,     0,    31,     0,     0,     0,     0,    66,     0,     0,
    67,     0,   317,     0,     0,     0,    87,    95,   304,     0,
     0,   192,    90,    91,     0,     0,     0,   190,   193,    97,
    74,    89,    96,    99,     0,     0,     0,   285,     0,   284,
     0,     0,   155,     0,     0,   156,     0,     0,   157,     0,
     0,     0,     0,   109,   110,   111,   112,     0,     0,   286,
     0,     0,     0,     0,     0,   311,     0,   138,   137,     0,
    34,     0,     0,     0,   290,     0,     0,     0,     0,    56,
    62,    64,     0,    70,     0,     0,    80,    82,   305,     0,
   189,   188,   191,    71,    72,   107,     0,   103,     0,     0,
     0,     0,     0,     0,   107,     0,     0,     0,     0,     0,
   288,   287,     0,     0,     0,     0,     0,     0,    30,     0,
     0,     0,    32,    46,   326,     0,   315,     0,     0,     0,
     0,   283,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   151,     0,     0,     0,     0,     0,     0,     0,   310,
   139,     0,     0,     0,     0,     0,    68,     0,     0,   101,
     0,   170,     0,     0,   172,     0,     0,   174,     0,     0,
   147,     0,   107,     0,     0,     0,     0,     0,     0,    86,
     0,     0,    38,     0,    44,     0,     0,   282,   158,     0,
     0,   165,   159,     0,     0,   167,   160,     0,     0,   169,
     0,   153,     0,   185,    75,    88,     0,     0,    92,     0,
     0,     0,     0,     0,     0,   176,     0,   178,     0,   180,
   152,   148,     0,     0,     0,     0,    35,     0,    42,     0,
     0,     0,   161,     0,     0,   162,     0,     0,   163,     0,
     0,   184,     0,     0,     0,    36,     0,   134,     0,     0,
     0,     0,     0,     0,     0,   154,     0,     0,     0,     0,
     0,     0,   171,     0,   173,     0,   175,     0,     0,     0,
    37,    39,     0,    40,    83,     0,     0,     0,     0,     0,
     0,     0,   177,   179,   181,     0,     0,    41,    43,     0,
     0,     0,    94,     0,    93,     0,     0,     0
};

static const short yydefgoto[] = {  1176,
     2,    53,    54,    55,   362,   876,   882,   531,   674,   998,
  1125,   532,  1091,  1153,   533,  1127,   534,   535,   678,   118,
   197,    56,   497,   292,   480,   481,   293,    60,    61,    62,
    63,    64,   294,   646,  1052,  1103,   924,   927,   930,  1070,
  1074,  1078,  1114,  1117,  1120,   753,   754,    66,    67,   295,
   121,   312,   155,   868,   784,   785,   297,   418,   181,   600,
   709,   122
};

static const short yypact[] = {  2247,
    15,  2632,-32768,  1762,   -95,     8,    39,   -67,   -18,    -9,
   -16,    67,    25,    36,    79,    47,   142,   149,   193,   292,
   197,   573,   119,   116,   343,   343,   140,   -22,     9,   237,
    12,   288,   310,   355,   302,   323,   344,   230,   239,   -14,
    13,     7,-32768,   253,-32768,   384,-32768,   405,   447,   434,
     4,    21,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    42,    14,
-32768,-32768,-32768,-32768,   -57,   143,   181,   229,   312,   345,
   357,   385,   468,   521,   522,   589,   599,   600,   611,   612,
   629,   630,   633,   634,   640,   351,   358,   403,   417,-32768,
   436,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1975,  1975,
  1975,-32768,-32768,  1975,  1366,    31,   571,  1975,   572,   850,
-32768,   606,   610,-32768,  1975,-32768,  1975,  1975,  1975,   448,
  1975,   488,  1975,  1975,  1299,  1975,   485,   491,   511,  1299,
   505,   532,   542,   543,   547,   548,   566,   697,   343,   343,
   343,  1975,  1975,   -48,-32768,   281,   343,   556,   581,   609,
  1602,   300,   605,-32768,  1299,    28,-32768,-32768,-32768,  1299,
  1299,   618,   619,   721,  1975,  1975,   -42,  1975,   645,  1975,
   658,   706,  1975,  1975,-32768,   782,-32768,   694,-32768,-32768,
   810,-32768,   835,   710,  1975,   840,-32768,   343,-32768,  1975,
  1975,  1975,  1975,  1975,  1975,  1975,  1975,  1975,  1975,  1975,
  1975,  1975,  1975,  1975,  1975,  1975,  1975,  1975,  1975,  1975,
  1975,  1975,  1975,  1975,  1975,  1975,  1975,  1975,  1975,  1975,
  1975,  1975,  1975,  1975,  1975,  1975,  1975,  1975,  1975,  1975,
  1975,   464,   487,   487,   487,   842,   120,   715,   715,   715,
  4758,    20,  1811,  3983,   244,   713,   843,   718,   914,-32768,
-32768,  1975,  1975,  1975,  1975,  1975,  1975,  1975,  1975,  1975,
  1975,  1975,  1975,  1975,  1975,  1975,-32768,   -72,  2321,  4781,
  4804,  4827,  1975,  4850,  1975,  4873,  4896,   429,   714,  1632,
  1165,-32768,-32768,-32768,   690,   846,-32768,  4919,  1975,  1975,
  1975,   848,  1975,  1975,  1975,  1975,  1975,  1975,  1975,   727,
   -19,-32768,-32768,  2432,  3235,   343,   343,   574,   574,   171,
  1975,  1975,  1975,  1602,  1602,  1975,   226,-32768,  1975,  2308,
    80,   854,-32768,  1975,  2329,   855,   856,  1975,  1975,-32768,
  4942,  4965,   775,  1975,  4988,   776,  3257,-32768,   728,  1225,
  5011,-32768,  1975,  2374,-32768,  2419,-32768,  1975,  4008,   309,
   308,     2,  5034,  4033,  5057,  4058,  5080,  4083,  5103,  4108,
  5126,  4133,  5149,  4158,  5172,  4183,  5195,  4208,  5218,  4233,
  5241,  4258,  5264,  4283,  3279,  3301,  5287,  4308,  5310,  4333,
  5333,  4358,  5356,  4383,  5379,  4408,  5402,  4433,  3323,  3345,
  3367,  3389,  3411,  3433,     0,    58,   730,   733,   736,   734,
  1975,-32768,  1299,  1299,  2005,   690,-32768,   286,   306,   487,
  1975,   864,   869,    16,   742,-32768,  2092,   545,   473,   565,
   565,   486,   486,   486,   486,   569,   569,   715,   715,   715,
   715,   871,  1811,  1975,   872,   873,   874,  5425,   875,  5448,
   876,   877,  1429,  1975,   601,  1811,-32768,   563,  1975,  1975,
   878,  2707,  5471,  5494,  1975,  2731,  2755,  5517,  5540,  5563,
  5586,  5609,   743,   343,  1975,  1975,-32768,-32768,-32768,   747,
  2693,-32768,   749,  1975,  3455,  3477,  3499,  1030,   343,  2440,
  4458,   -63,   -43,   -34,   -61,-32768,-32768,-32768,  1975,-32768,
  4483,-32768,   751,   754,  4508,  4533,   886,   887,   764,  5632,
   889,   769,  1975,  2485,  1975,  1975,-32768,  5655,-32768,-32768,
  4558,    57,-32768,-32768,-32768,   783,   785,   779,-32768,   912,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1975,  1975,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1975,  1975,  1975,  1975,  1975,  1975,  1975,   917,-32768,
  1811,   487,-32768,-32768,  1975,  4583,   918,   919,  1811,   792,
    55,  1975,   921,   923,   970,-32768,   916,   797,    13,   925,
-32768,  1975,-32768,   266,  3521,   343,  1299,  1299,   926,  1299,
   927,  1299,  1299,-32768,  1811,  2779,  1565,   635,-32768,  2107,
   997,   794,   928,   929,   930,   789,   931,   932,   933,   935,
   937,   938,   939,   943,   268,  3543,  3565,-32768,-32768,  2803,
   343,   343,   343,   373,-32768,   386,   944,  1811,  1811,  1811,
  1811,  1091,   945,  1975,  1975,   946,   948,  1299,  1299,  1975,
   942,  1299,   951,  3587,-32768,  2122,   594,   949,   959,   974,
-32768,   976,     6,   852,  1975,  1975,  1299,   849,-32768,  5678,
  4608,  5701,  4633,  5724,  4658,  5747,  4683,  4708,   857,   338,
   859,  5770,   380,-32768,-32768,   690,-32768,    56,   378,   853,
   985,  1132,-32768,-32768,-32768,    13,  1975,-32768,   639,-32768,
  5908,   987,  1975,    19,    48,    60,  1299,   988,  1299,   989,
   992,   642,-32768,-32768,  1811,-32768,  1975,-32768,  1975,  1299,
  1299,  1299,-32768,   444,  1299,  1299,  1299,  1299,  1299,  1299,
  1299,   519,  1975,  1975,  1975,   861,   -68,   136,   255,  1602,
   994,   863,   -31,-32768,-32768,   646,   647,   650,   654,-32768,
-32768,  3609,  3631,-32768,-32768,   996,  1000,  5793,   -35,   922,
-32768,  1975,  1975,  1975,-32768,   870,-32768,   309,-32768,  1004,
  1975,  3653,  3675,   655,-32768,  1975,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   879,-32768,-32768,-32768,-32768,  1299,
   487,  1975,  1006,  1009,    16,-32768,  1010,  4733,    13,-32768,
-32768,  3697,-32768,-32768,   343,-32768,   343,  1011,-32768,  1012,
-32768,-32768,   885,   678,  5908,  3719,  1014,  1015,  1016,  1975,
  1975,   815,  1017,  1034,  1035,  1037,  1040,  1041,-32768,  1940,
  2827,  5816,  2144,   574,   343,  1042,   343,  1043,   343,  1044,
  2851,   376,-32768,  1299,-32768,-32768,  1045,  1046,  1047,  1048,
  1975,  1975,-32768,-32768,  1049,  1299,  1299,   968,  1299,  2640,
   419,  5839,  1975,-32768,-32768,   492,  5908,  1975,  1975,  1299,
   920,   685,  5908,  1053,  1055,  1057,  1399,-32768,  1052,  1058,
-32768,   934,-32768,  1975,    61,   125,-32768,-32768,-32768,   936,
  1975,-32768,-32768,-32768,  2032,  2047,  1059,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  2062,  1061,   940,-32768,  1975,-32768,
   956,   424,-32768,   941,   426,-32768,   947,   439,-32768,   958,
   960,  1975,   962,-32768,-32768,-32768,-32768,  3741,  3763,   -35,
   502,   691,   963,   984,  1975,-32768,  1975,-32768,-32768,  3785,
-32768,  1975,  3807,  3829,-32768,  1299,  1975,  1065,   971,-32768,
-32768,-32768,    13,-32768,   986,  3851,-32768,-32768,-32768,  3873,
-32768,-32768,-32768,-32768,-32768,   574,  2677,-32768,  1602,   386,
  1602,   386,  1602,   386,-32768,  2875,  1299,  1975,  1975,  1018,
-32768,-32768,  1299,  1975,  2899,  2923,  1299,   964,  5908,  1975,
  1975,   692,  5908,-32768,-32768,  1067,-32768,  1975,  1069,   965,
  1975,-32768,  2947,   445,   216,  2971,   463,   217,  2995,   484,
   220,  2530,   990,   695,  3019,  3043,   991,   975,  2077,-32768,
-32768,   983,  1975,  5862,  3895,  1118,-32768,  3917,   993,-32768,
  3067,  1119,  1975,  1120,  1126,  1975,  1129,  1130,  1975,  1139,
-32768,   386,-32768,  1299,  1151,  1152,  1158,  1299,  1299,-32768,
  1164,   696,-32768,  1975,-32768,  1975,  1166,-32768,-32768,  1060,
  3091,-32768,-32768,  1062,  3115,-32768,-32768,  1078,  3139,-32768,
   242,  2551,  1033,-32768,-32768,-32768,  1036,  1079,-32768,  1193,
  1081,  5885,  3163,  1080,   386,  1214,   386,  1216,   386,  1217,
-32768,-32768,   386,  1218,  1299,  1141,-32768,   487,-32768,  1226,
  1229,   258,-32768,  1097,   265,-32768,  1098,   296,-32768,  1099,
   305,-32768,  1102,  1100,   700,-32768,  1109,-32768,  1121,  1251,
   386,  1252,   386,  1253,   386,-32768,  1177,  1975,   487,  1257,
   487,  1258,-32768,   314,-32768,   318,-32768,   327,  1127,  3939,
-32768,-32768,   703,-32768,-32768,  1260,  1265,  1266,  1975,  1975,
   487,  1267,-32768,-32768,-32768,  3961,  3187,-32768,-32768,  1975,
  1268,  3211,-32768,  1269,-32768,  1276,  1277,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,   755,-32768,   245,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -251,
    -3,-32768,  1278,     5,  -316,  -162,    10,-32768,-32768,-32768,
-32768,-32768,  1279,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  -673,  -738,-32768,-32768,    -4,
-32768,   316,-32768,   342,  -819,    18,   -98,  -283,  -570,   478,
-32768,    -2
};


#define	YYLAST		6038


static const short yytable[] = {   120,
   119,   330,   483,   421,   335,   525,    58,   458,   189,   525,
   182,    59,   163,   124,   856,   166,   179,   198,   158,   598,
     3,   159,   160,   130,   813,   189,   413,   354,   708,   356,
   177,   332,   132,   333,   255,   123,   751,    96,    97,    98,
    99,   752,   343,   100,   126,   194,   941,   942,   191,   193,
   130,   316,   317,   814,    96,    97,    98,    99,   699,   442,
   100,   189,    71,   127,   443,   816,   967,   127,   845,   134,
   846,   316,   317,   200,   648,   201,   651,   526,   527,   528,
   529,   526,   527,   528,   529,   498,   499,   131,   344,   318,
    96,    97,    98,    99,   649,   866,   100,   150,   151,   815,
   316,   317,   867,   650,   248,   249,   250,   855,   152,   251,
   254,   817,   128,   259,   131,   161,   178,   474,   256,   257,
   279,   129,   280,   281,   282,   414,   284,   135,   286,   287,
   968,   298,   578,   132,   579,   807,  1002,   183,   316,   317,
   530,   190,   700,   701,   780,   125,   164,   314,   315,   167,
   180,   199,   296,   599,   417,   133,   315,   302,   192,   604,
   334,   105,   106,   107,   108,   490,   134,   592,   112,   113,
   341,   342,   618,   345,   195,   347,   196,   136,   350,   351,
   316,   317,   331,   112,   113,   514,   137,   336,   337,   580,
   359,   670,   417,   138,   581,   363,   364,   365,   366,   367,
   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
   378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
   388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
   398,   399,   400,   401,   402,   403,   404,   139,   893,   406,
   407,   408,   409,   143,   316,   317,   112,   113,   416,   148,
   420,   422,   411,   149,   196,   316,   317,   427,   428,   429,
   430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
   440,   441,   847,   202,   848,   203,   856,   157,   448,   856,
   450,   165,   856,   751,   751,   249,   416,   751,   752,   752,
   316,   317,   752,   168,   462,   463,   464,   690,   466,   467,
   468,   469,   470,   471,   472,   172,  1015,   484,  1018,   751,
  1021,   204,    71,   205,   752,   169,   485,   486,   487,   248,
   249,   488,   479,   479,   491,   751,   173,   482,   482,   501,
   752,   722,   751,   505,   506,   140,   141,   752,   142,   510,
   154,   156,   856,   162,   417,   316,   317,   174,   518,   105,
   106,   107,   108,   521,  1044,  1047,   523,   417,  1050,   206,
   175,   207,   489,   751,   756,   757,   758,   759,   752,   176,
   112,   113,   751,   856,   316,   317,   856,   752,  1081,   856,
  1101,   751,   856,   184,   801,   751,   752,   316,   317,   185,
   752,   849,  1006,   850,   751,   170,  1130,   712,   171,   752,
   316,   317,   589,  1132,   743,   856,   586,   856,   186,   856,
   249,   105,   106,   107,   108,   593,   595,   594,   319,   316,
   317,  1112,   589,  1115,   590,  1118,   947,   316,   317,  1121,
   587,   588,   112,   113,  1134,   112,   113,   328,   416,   605,
   591,   824,   208,  1136,   209,   524,   800,   802,   586,   616,
   187,   416,  1156,   751,   620,   621,  1157,  1144,   752,  1146,
   626,  1148,   150,   151,   311,  1158,   313,   405,   189,   797,
   636,   637,   320,   152,   589,   210,   327,   211,   188,   640,
   153,   242,   417,   105,   106,   107,   108,   212,   243,   213,
   697,   189,   316,   317,   652,   316,   317,    96,    97,    98,
    99,   830,   831,   100,   112,   113,   112,   113,   664,   750,
   666,   667,   932,   361,   670,   214,   417,   215,   671,   672,
    96,    97,    98,    99,   839,   840,   100,   921,   262,   263,
   264,   265,   266,   244,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   316,   317,   316,   317,   245,   276,   417,
   417,   417,   417,   680,   681,   112,   113,   948,   316,   317,
   979,   453,   981,   196,   316,   317,   246,   682,   683,   684,
   685,   686,   687,   688,   258,   983,   416,   260,   283,   691,
   692,  1043,   316,   317,   696,   265,   266,   702,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   711,   216,  1046,
   217,   774,   276,   316,   317,   271,   272,   273,   274,   275,
   416,   277,   586,   144,   278,   276,   145,   146,   285,   147,
  1049,   300,   299,   951,   715,   716,   417,   718,   952,   720,
   721,   477,   478,   991,    24,    25,    26,    27,   880,    29,
   313,   301,   303,   416,   416,   416,   416,    35,    36,   762,
   763,   218,   220,   219,   221,   768,   264,   265,   266,  1010,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   304,
   782,   783,   305,   306,   276,   766,   767,   307,   308,   770,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   671,
   273,   274,   275,   321,   276,   803,   309,   459,   276,   589,
   310,   619,   808,   262,   263,   264,   265,   266,   812,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   322,   222,
   416,   223,   825,   276,   826,   775,   340,   112,   113,   224,
   226,   225,   227,   617,   818,   196,   820,   329,   841,   842,
   843,   228,   230,   229,   231,   851,   323,   827,   828,   829,
   338,   339,   832,   833,   834,   835,   836,   837,   838,   232,
   234,   233,   235,   236,   238,   237,   239,   870,   871,   872,
   240,   589,   241,   726,   874,   809,   877,   810,   589,   346,
   823,   883,   589,   589,   857,   858,   589,   352,   859,   635,
   589,   880,   860,   881,   733,   348,   349,   887,   886,   262,
   263,   264,   265,   266,   644,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   589,   355,   900,   885,   907,   276,
   908,   957,  1022,   958,   353,   905,   906,   880,   880,   992,
  1036,  1054,   957,  1055,  1090,   915,  1139,   916,  1140,  1161,
   357,  1162,   358,   360,   276,   734,   410,   423,   479,   424,
   425,   454,   460,   482,   465,   261,   938,   939,   473,   500,
   509,   503,   504,   512,   583,   515,   582,   584,   950,   596,
   585,   933,   597,   953,   954,   601,   603,   634,   606,   607,
   608,   610,   612,   613,   622,   638,   944,   639,   654,   966,
  1082,   655,   658,   659,   660,   662,   970,   955,   262,   263,
   264,   265,   266,   663,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   675,   977,   676,   677,   679,   276,   426,
   689,   714,   706,   694,   695,   698,   703,   986,   704,   707,
   710,   729,   717,   719,   730,   731,   732,   735,   736,   737,
   995,   738,   996,   739,   740,   741,   742,   999,   769,   755,
   761,   764,  1003,   765,   771,   776,   747,   748,   749,   262,
   263,   264,   265,   266,   777,   267,   268,   269,   270,   271,
   272,   273,   274,   275,  1013,   705,  1016,   778,  1019,   276,
   479,   779,   781,  1025,  1026,   482,   786,   804,   796,  1029,
   798,   805,   811,   819,   821,  1034,  1035,   822,   844,   853,
   854,   863,   728,  1038,  1024,   864,  1041,   873,   869,   875,
  1028,   888,   889,   884,  1032,   891,   897,   898,   899,   902,
   903,   904,   909,   262,   263,   264,   265,   266,   883,   267,
   268,   269,   270,   271,   272,   273,   274,   275,  1071,   910,
   911,  1075,   912,   276,  1079,   913,   914,   923,   926,   929,
   934,   935,   936,   937,   943,   940,   959,   956,   963,  1092,
   960,  1093,   961,   964,   973,   852,   975,   994,   965,   969,
  1004,  1083,  1037,  1039,  1007,  1087,  1088,   976,   980,   262,
   263,   264,   265,   266,   982,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   978,   984,   760,   985,   987,   276,
   993,  1033,  1005,  1040,  1027,  1126,   262,   263,   264,   265,
   266,  1059,   267,   268,   269,   270,   271,   272,   273,   274,
   275,  1061,  1123,  1065,  1069,  1072,   276,  1053,  1058,  1067,
   895,  1073,   896,  1150,  1076,  1077,  1151,   806,  1154,   262,
   263,   264,   265,   266,  1080,   267,   268,   269,   270,   271,
   272,   273,   274,   275,  1166,  1167,  1084,  1085,  1168,   276,
   922,   412,   925,  1086,   928,  1172,   475,    68,   288,  1089,
  1094,  1104,  1105,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,  1095,  1107,  1097,
   262,   263,   264,   265,   266,   289,   267,   268,   269,   270,
   271,   272,   273,   274,   275,  1099,  1111,  1106,  1108,  1113,
   276,  1116,  1119,  1122,  1124,    24,    25,    26,    27,    28,
    29,  1128,   516,  1129,  1131,  1133,  1135,  1138,    35,    36,
  1137,   262,   263,   264,   265,   266,  1141,   267,   268,   269,
   270,   271,   272,   273,   274,   275,  1143,  1145,  1147,  1142,
  1149,   276,  1152,  1155,  1159,  1163,   101,   102,   103,   104,
  1164,  1165,  1169,  1173,  1175,  1177,  1178,  1062,   673,    57,
    65,   990,   890,     0,   109,   415,     0,     0,     0,     0,
   111,     0,     0,     0,  1014,   114,  1017,     0,  1020,     0,
   117,    68,   288,   457,     0,     0,     0,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,     0,     0,     0,   262,   263,   264,   265,   266,   289,
   267,   268,   269,   270,   271,   272,   273,   274,   275,     0,
     0,     0,     0,     0,   276,     0,     0,     0,     0,    24,
    25,    26,    27,    28,    29,     0,     0,     0,    68,   247,
     0,     0,    35,    36,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,     0,     0,
   101,   102,   103,   104,   962,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   109,   290,
     0,     0,     0,     0,   111,     0,     0,     0,     0,   114,
     0,    68,   247,     0,   117,     0,   291,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,     0,     0,     0,     0,     0,     0,   101,   102,   103,
   104,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   109,   110,     0,     0,     0,
     0,   111,     0,     0,     0,     0,   114,     0,     0,   252,
     0,   117,     0,   253,     0,     0,     0,     0,   262,   263,
   264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
   273,   274,   275,     0,     0,     0,     0,     0,   276,     0,
   101,   102,   103,   104,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   109,   110,
     0,     0,     0,     0,   111,     0,     0,     0,     0,   114,
     0,     0,   614,     0,   117,     0,   615,    68,   247,     0,
     0,     0,     0,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,     0,     0,     0,
     0,     0,     0,     0,    68,   247,     0,     0,     0,     0,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    68,   455,     0,     0,     0,     0,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,     0,     0,   101,   102,   103,   104,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   109,   110,     0,     0,     0,     0,
   111,     0,     0,     0,     0,   114,     0,     0,   724,     0,
   117,     0,   725,   101,   102,   103,   104,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   324,   325,     0,     0,     0,     0,   111,     0,     0,
     0,     0,   326,   101,   102,   103,   104,   117,     0,   153,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   109,   110,     0,     0,     0,     0,   111,     0,     0,
     0,     0,   114,     0,    68,    69,    70,   117,    71,   456,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,     0,    96,    97,    98,    99,     0,
     0,   100,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    68,   288,     0,     0,     0,     0,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,     0,     0,     0,     0,     0,     0,     0,
     0,   289,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   101,   102,   103,   104,   105,   106,   107,
   108,    24,    25,    26,    27,    28,    29,     0,     0,     0,
     0,   109,   110,     0,    35,    36,     0,   111,   112,   113,
     0,     0,   114,     0,   115,     0,   116,   117,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   101,   102,   103,   104,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   109,   415,     0,     0,     0,     0,   111,     0,     0,     0,
     0,   114,    68,   247,   189,     0,   117,     0,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,     0,    96,    97,    98,    99,    68,   247,   100,
     0,     0,     0,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    68,   455,     0,
     0,     0,     0,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,   971,     0,     0,
     0,   101,   102,   103,   104,     0,     0,     0,     0,     0,
     0,     0,   972,     0,     0,     0,     0,     0,     0,   109,
   110,     0,     0,     0,     0,   111,     0,   974,     0,     0,
   114,     0,     0,     0,     0,   117,   101,   102,   103,   104,
     0,     0,  1060,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   109,   110,     0,     0,     0,   602,
   111,     0,     0,     0,     0,   114,   101,   102,   103,   104,
   117,     0,     0,     0,   727,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   109,   110,     0,     0,     0,   773,
   111,     0,     0,     0,     0,   114,     0,     0,     0,     0,
   117,   262,   263,   264,   265,   266,     0,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   262,   263,   264,   265,
   266,   276,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   262,   263,   264,   265,   266,   276,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   262,   263,   264,   265,
   266,   276,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   262,   263,   264,   265,   266,   276,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   262,   263,   264,   265,
   266,   276,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   262,   263,   264,   265,   266,   276,   267,   268,   269,
   270,   271,   272,   273,   274,   275,    -3,     1,     0,     0,
    -3,   276,     0,   262,   263,   264,   265,   266,     0,   267,
   268,   269,   270,   271,   272,   273,   274,   275,     0,     0,
     0,     0,     0,   276,     0,     0,     0,     0,     0,    -3,
   919,     0,   920,     0,    -3,    -3,     0,    -3,    -3,    -3,
    -3,    -3,    -3,    -3,    -3,     0,    -3,    -3,    -3,    -3,
    -3,    -3,    -3,     0,     0,     0,    -3,    -3,    -3,    -3,
    -3,    -3,    -3,     0,    -3,    -3,    -3,    -3,    -3,     0,
    -3,    -3,     0,     0,     0,     0,    -3,    -3,    -3,    -3,
     0,     0,     0,     0,    -3,     0,    -3,     0,    -3,    -3,
    -3,    -3,    -3,    -3,    -3,    -3,    -3,    -3,   492,     9,
    10,   493,   494,    13,   495,    15,     0,    16,     0,    18,
    19,     0,    21,    22,     0,     0,     0,     0,     0,   492,
     9,    10,   493,   494,    13,   495,    15,     0,    16,    34,
    18,    19,     0,    21,    22,     0,     0,     0,    38,    39,
    40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    34,     0,     0,     0,     0,     0,    50,     0,     0,    38,
    39,    40,     0,     0,   492,     9,    10,   493,   494,    13,
   495,    15,     0,    16,     0,    18,    19,    50,    21,    22,
   262,   263,   264,   265,   266,     0,   267,   268,   269,   270,
   271,   272,   273,   274,   275,    34,   496,     0,     0,     0,
   276,     0,     0,     0,    38,    39,    40,   444,     0,   492,
     9,    10,   493,   494,    13,   495,    15,   502,    16,     0,
    18,    19,    50,    21,    22,     0,     0,     0,     0,     0,
   492,     9,    10,   493,   494,    13,   495,    15,     0,    16,
    34,    18,    19,     0,    21,    22,     0,     0,     0,    38,
    39,    40,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    34,   519,     0,     0,     0,     0,    50,     0,     0,
    38,    39,    40,     0,     0,   492,     9,    10,   493,   494,
    13,   495,    15,     0,    16,     0,    18,    19,    50,    21,
    22,   262,   263,   264,   265,   266,     0,   267,   268,   269,
   270,   271,   272,   273,   274,   275,    34,   520,     0,     0,
     0,   276,     0,     0,     0,    38,    39,    40,   475,     0,
   492,     9,    10,   493,   494,    13,   495,    15,   645,    16,
     0,    18,    19,    50,    21,    22,     0,     0,     0,     0,
     0,   492,     9,    10,   493,   494,    13,   495,    15,     0,
    16,    34,    18,    19,     0,    21,    22,     0,     0,     0,
    38,    39,    40,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    34,   665,     0,     0,     0,     0,    50,     0,
     0,    38,    39,    40,     0,     4,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    50,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     5,     0,     0,     0,  1051,     6,
     7,     0,     8,     9,    10,    11,    12,    13,    14,    15,
     0,    16,    17,    18,    19,    20,    21,    22,     0,  1102,
     0,    23,    24,    25,    26,    27,    28,    29,     0,    30,
    31,    32,    33,    34,     0,    35,    36,     0,     0,     0,
     0,    37,    38,    39,    40,     0,     0,     0,     0,    41,
     0,    42,     0,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,   492,     9,    10,   493,   494,    13,   495,
    15,     0,    16,     0,    18,    19,     0,    21,    22,   262,
   263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
   272,   273,   274,   275,    34,     0,     0,     0,     0,   276,
     0,     0,     0,    38,    39,    40,   945,     0,   946,     0,
     0,     0,     0,     0,     0,     0,   262,   263,   264,   265,
   266,    50,   267,   268,   269,   270,   271,   272,   273,   274,
   275,     0,     0,     0,     0,     0,   276,     0,     0,     0,
     0,     0,     0,  1011,     0,  1012,   262,   263,   264,   265,
   266,     0,   267,   268,   269,   270,   271,   272,   273,   274,
   275,     0,     0,     0,     0,     0,   276,     0,     0,     0,
   262,   263,   264,   265,   266,   623,   267,   268,   269,   270,
   271,   272,   273,   274,   275,     0,     0,     0,     0,     0,
   276,     0,     0,     0,   262,   263,   264,   265,   266,   627,
   267,   268,   269,   270,   271,   272,   273,   274,   275,     0,
     0,     0,     0,     0,   276,     0,     0,     0,   262,   263,
   264,   265,   266,   628,   267,   268,   269,   270,   271,   272,
   273,   274,   275,     0,     0,     0,     0,     0,   276,     0,
     0,     0,   262,   263,   264,   265,   266,   723,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,     0,     0,   262,   263,   264,   265,
   266,   746,   267,   268,   269,   270,   271,   272,   273,   274,
   275,     0,     0,     0,     0,     0,   276,     0,     0,     0,
   262,   263,   264,   265,   266,   917,   267,   268,   269,   270,
   271,   272,   273,   274,   275,     0,     0,     0,     0,     0,
   276,     0,     0,     0,   262,   263,   264,   265,   266,   931,
   267,   268,   269,   270,   271,   272,   273,   274,   275,     0,
     0,     0,     0,     0,   276,     0,     0,     0,   262,   263,
   264,   265,   266,  1023,   267,   268,   269,   270,   271,   272,
   273,   274,   275,     0,     0,     0,     0,     0,   276,     0,
     0,     0,   262,   263,   264,   265,   266,  1030,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,     0,     0,   262,   263,   264,   265,
   266,  1031,   267,   268,   269,   270,   271,   272,   273,   274,
   275,     0,     0,     0,     0,     0,   276,     0,     0,     0,
   262,   263,   264,   265,   266,  1042,   267,   268,   269,   270,
   271,   272,   273,   274,   275,     0,     0,     0,     0,     0,
   276,     0,     0,     0,   262,   263,   264,   265,   266,  1045,
   267,   268,   269,   270,   271,   272,   273,   274,   275,     0,
     0,     0,     0,     0,   276,     0,     0,     0,   262,   263,
   264,   265,   266,  1048,   267,   268,   269,   270,   271,   272,
   273,   274,   275,     0,     0,     0,     0,     0,   276,     0,
     0,     0,   262,   263,   264,   265,   266,  1056,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,     0,     0,   262,   263,   264,   265,
   266,  1057,   267,   268,   269,   270,   271,   272,   273,   274,
   275,     0,     0,     0,     0,     0,   276,     0,     0,     0,
   262,   263,   264,   265,   266,  1068,   267,   268,   269,   270,
   271,   272,   273,   274,   275,     0,     0,     0,     0,     0,
   276,     0,     0,     0,   262,   263,   264,   265,   266,  1096,
   267,   268,   269,   270,   271,   272,   273,   274,   275,     0,
     0,     0,     0,     0,   276,     0,     0,     0,   262,   263,
   264,   265,   266,  1098,   267,   268,   269,   270,   271,   272,
   273,   274,   275,     0,     0,     0,     0,     0,   276,     0,
     0,     0,   262,   263,   264,   265,   266,  1100,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,     0,     0,   262,   263,   264,   265,
   266,  1110,   267,   268,   269,   270,   271,   272,   273,   274,
   275,     0,     0,     0,     0,     0,   276,     0,     0,     0,
   262,   263,   264,   265,   266,  1171,   267,   268,   269,   270,
   271,   272,   273,   274,   275,     0,     0,     0,     0,     0,
   276,     0,     0,     0,   262,   263,   264,   265,   266,  1174,
   267,   268,   269,   270,   271,   272,   273,   274,   275,     0,
     0,     0,     0,     0,   276,     0,   262,   263,   264,   265,
   266,   476,   267,   268,   269,   270,   271,   272,   273,   274,
   275,     0,     0,     0,     0,     0,   276,     0,   262,   263,
   264,   265,   266,   513,   267,   268,   269,   270,   271,   272,
   273,   274,   275,     0,     0,     0,     0,     0,   276,     0,
   262,   263,   264,   265,   266,   558,   267,   268,   269,   270,
   271,   272,   273,   274,   275,     0,     0,     0,     0,     0,
   276,     0,   262,   263,   264,   265,   266,   559,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,   262,   263,   264,   265,   266,   572,
   267,   268,   269,   270,   271,   272,   273,   274,   275,     0,
     0,     0,     0,     0,   276,     0,   262,   263,   264,   265,
   266,   573,   267,   268,   269,   270,   271,   272,   273,   274,
   275,     0,     0,     0,     0,     0,   276,     0,   262,   263,
   264,   265,   266,   574,   267,   268,   269,   270,   271,   272,
   273,   274,   275,     0,     0,     0,     0,     0,   276,     0,
   262,   263,   264,   265,   266,   575,   267,   268,   269,   270,
   271,   272,   273,   274,   275,     0,     0,     0,     0,     0,
   276,     0,   262,   263,   264,   265,   266,   576,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,   262,   263,   264,   265,   266,   577,
   267,   268,   269,   270,   271,   272,   273,   274,   275,     0,
     0,     0,     0,     0,   276,     0,   262,   263,   264,   265,
   266,   641,   267,   268,   269,   270,   271,   272,   273,   274,
   275,     0,     0,     0,     0,     0,   276,     0,   262,   263,
   264,   265,   266,   642,   267,   268,   269,   270,   271,   272,
   273,   274,   275,     0,     0,     0,     0,     0,   276,     0,
   262,   263,   264,   265,   266,   643,   267,   268,   269,   270,
   271,   272,   273,   274,   275,     0,     0,     0,     0,     0,
   276,     0,   262,   263,   264,   265,   266,   713,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,   262,   263,   264,   265,   266,   744,
   267,   268,   269,   270,   271,   272,   273,   274,   275,     0,
     0,     0,     0,     0,   276,     0,   262,   263,   264,   265,
   266,   745,   267,   268,   269,   270,   271,   272,   273,   274,
   275,     0,     0,     0,     0,     0,   276,     0,   262,   263,
   264,   265,   266,   772,   267,   268,   269,   270,   271,   272,
   273,   274,   275,     0,     0,     0,     0,     0,   276,     0,
   262,   263,   264,   265,   266,   861,   267,   268,   269,   270,
   271,   272,   273,   274,   275,     0,     0,     0,     0,     0,
   276,     0,   262,   263,   264,   265,   266,   862,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,   262,   263,   264,   265,   266,   878,
   267,   268,   269,   270,   271,   272,   273,   274,   275,     0,
     0,     0,     0,     0,   276,     0,   262,   263,   264,   265,
   266,   879,   267,   268,   269,   270,   271,   272,   273,   274,
   275,     0,     0,     0,     0,     0,   276,     0,   262,   263,
   264,   265,   266,   894,   267,   268,   269,   270,   271,   272,
   273,   274,   275,     0,     0,     0,     0,     0,   276,     0,
   262,   263,   264,   265,   266,   901,   267,   268,   269,   270,
   271,   272,   273,   274,   275,     0,     0,     0,     0,     0,
   276,     0,   262,   263,   264,   265,   266,   988,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,   262,   263,   264,   265,   266,   989,
   267,   268,   269,   270,   271,   272,   273,   274,   275,     0,
     0,     0,     0,     0,   276,     0,   262,   263,   264,   265,
   266,   997,   267,   268,   269,   270,   271,   272,   273,   274,
   275,     0,     0,     0,     0,     0,   276,     0,   262,   263,
   264,   265,   266,  1000,   267,   268,   269,   270,   271,   272,
   273,   274,   275,     0,     0,     0,     0,     0,   276,     0,
   262,   263,   264,   265,   266,  1001,   267,   268,   269,   270,
   271,   272,   273,   274,   275,     0,     0,     0,     0,     0,
   276,     0,   262,   263,   264,   265,   266,  1008,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,   262,   263,   264,   265,   266,  1009,
   267,   268,   269,   270,   271,   272,   273,   274,   275,     0,
     0,     0,     0,     0,   276,     0,   262,   263,   264,   265,
   266,  1064,   267,   268,   269,   270,   271,   272,   273,   274,
   275,     0,     0,     0,     0,     0,   276,     0,   262,   263,
   264,   265,   266,  1066,   267,   268,   269,   270,   271,   272,
   273,   274,   275,     0,     0,     0,     0,     0,   276,     0,
   262,   263,   264,   265,   266,  1160,   267,   268,   269,   270,
   271,   272,   273,   274,   275,     0,     0,     0,     0,     0,
   276,     0,   262,   263,   264,   265,   266,  1170,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,     0,     0,   419,   262,   263,   264,
   265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
   274,   275,     0,     0,     0,     0,     0,   276,     0,     0,
     0,   522,   262,   263,   264,   265,   266,     0,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,     0,     0,   537,   262,   263,   264,
   265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
   274,   275,     0,     0,     0,     0,     0,   276,     0,     0,
     0,   539,   262,   263,   264,   265,   266,     0,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,     0,     0,   541,   262,   263,   264,
   265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
   274,   275,     0,     0,     0,     0,     0,   276,     0,     0,
     0,   543,   262,   263,   264,   265,   266,     0,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,     0,     0,   545,   262,   263,   264,
   265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
   274,   275,     0,     0,     0,     0,     0,   276,     0,     0,
     0,   547,   262,   263,   264,   265,   266,     0,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,     0,     0,   549,   262,   263,   264,
   265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
   274,   275,     0,     0,     0,     0,     0,   276,     0,     0,
     0,   551,   262,   263,   264,   265,   266,     0,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,     0,     0,   553,   262,   263,   264,
   265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
   274,   275,     0,     0,     0,     0,     0,   276,     0,     0,
     0,   555,   262,   263,   264,   265,   266,     0,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,     0,     0,   557,   262,   263,   264,
   265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
   274,   275,     0,     0,     0,     0,     0,   276,     0,     0,
     0,   561,   262,   263,   264,   265,   266,     0,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,     0,     0,   563,   262,   263,   264,
   265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
   274,   275,     0,     0,     0,     0,     0,   276,     0,     0,
     0,   565,   262,   263,   264,   265,   266,     0,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,     0,     0,   567,   262,   263,   264,
   265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
   274,   275,     0,     0,     0,     0,     0,   276,     0,     0,
     0,   569,   262,   263,   264,   265,   266,     0,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,     0,     0,   571,   262,   263,   264,
   265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
   274,   275,     0,     0,     0,     0,     0,   276,     0,     0,
     0,   647,   262,   263,   264,   265,   266,     0,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,     0,     0,   653,   262,   263,   264,
   265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
   274,   275,     0,     0,     0,     0,     0,   276,     0,     0,
     0,   656,   262,   263,   264,   265,   266,     0,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,     0,     0,   657,   262,   263,   264,
   265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
   274,   275,     0,     0,     0,     0,     0,   276,     0,     0,
     0,   669,   262,   263,   264,   265,   266,     0,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,     0,     0,   693,   262,   263,   264,
   265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
   274,   275,     0,     0,     0,     0,     0,   276,     0,     0,
     0,   788,   262,   263,   264,   265,   266,     0,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,     0,     0,   790,   262,   263,   264,
   265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
   274,   275,     0,     0,     0,     0,     0,   276,     0,     0,
     0,   792,   262,   263,   264,   265,   266,     0,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,     0,     0,   794,   262,   263,   264,
   265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
   274,   275,     0,     0,     0,     0,     0,   276,     0,     0,
     0,   795,   262,   263,   264,   265,   266,     0,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,     0,     0,   892,   262,   263,   264,
   265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
   274,   275,     0,     0,     0,     0,     0,   276,     0,   412,
   262,   263,   264,   265,   266,     0,   267,   268,   269,   270,
   271,   272,   273,   274,   275,     0,     0,     0,     0,     0,
   276,     0,   445,   262,   263,   264,   265,   266,     0,   267,
   268,   269,   270,   271,   272,   273,   274,   275,     0,     0,
     0,     0,     0,   276,     0,   446,   262,   263,   264,   265,
   266,     0,   267,   268,   269,   270,   271,   272,   273,   274,
   275,     0,     0,     0,     0,     0,   276,     0,   447,   262,
   263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
   272,   273,   274,   275,     0,     0,     0,     0,     0,   276,
     0,   449,   262,   263,   264,   265,   266,     0,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,   451,   262,   263,   264,   265,   266,
     0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     0,     0,     0,     0,     0,   276,     0,   452,   262,   263,
   264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
   273,   274,   275,     0,     0,     0,     0,     0,   276,     0,
   461,   262,   263,   264,   265,   266,     0,   267,   268,   269,
   270,   271,   272,   273,   274,   275,     0,     0,     0,     0,
     0,   276,     0,   507,   262,   263,   264,   265,   266,     0,
   267,   268,   269,   270,   271,   272,   273,   274,   275,     0,
     0,     0,     0,     0,   276,     0,   508,   262,   263,   264,
   265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
   274,   275,     0,     0,     0,     0,     0,   276,     0,   511,
   262,   263,   264,   265,   266,     0,   267,   268,   269,   270,
   271,   272,   273,   274,   275,     0,     0,     0,     0,     0,
   276,     0,   517,   262,   263,   264,   265,   266,     0,   267,
   268,   269,   270,   271,   272,   273,   274,   275,     0,     0,
     0,     0,     0,   276,     0,   536,   262,   263,   264,   265,
   266,     0,   267,   268,   269,   270,   271,   272,   273,   274,
   275,     0,     0,     0,     0,     0,   276,     0,   538,   262,
   263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
   272,   273,   274,   275,     0,     0,     0,     0,     0,   276,
     0,   540,   262,   263,   264,   265,   266,     0,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,   542,   262,   263,   264,   265,   266,
     0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     0,     0,     0,     0,     0,   276,     0,   544,   262,   263,
   264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
   273,   274,   275,     0,     0,     0,     0,     0,   276,     0,
   546,   262,   263,   264,   265,   266,     0,   267,   268,   269,
   270,   271,   272,   273,   274,   275,     0,     0,     0,     0,
     0,   276,     0,   548,   262,   263,   264,   265,   266,     0,
   267,   268,   269,   270,   271,   272,   273,   274,   275,     0,
     0,     0,     0,     0,   276,     0,   550,   262,   263,   264,
   265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
   274,   275,     0,     0,     0,     0,     0,   276,     0,   552,
   262,   263,   264,   265,   266,     0,   267,   268,   269,   270,
   271,   272,   273,   274,   275,     0,     0,     0,     0,     0,
   276,     0,   554,   262,   263,   264,   265,   266,     0,   267,
   268,   269,   270,   271,   272,   273,   274,   275,     0,     0,
     0,     0,     0,   276,     0,   556,   262,   263,   264,   265,
   266,     0,   267,   268,   269,   270,   271,   272,   273,   274,
   275,     0,     0,     0,     0,     0,   276,     0,   560,   262,
   263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
   272,   273,   274,   275,     0,     0,     0,     0,     0,   276,
     0,   562,   262,   263,   264,   265,   266,     0,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,   564,   262,   263,   264,   265,   266,
     0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     0,     0,     0,     0,     0,   276,     0,   566,   262,   263,
   264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
   273,   274,   275,     0,     0,     0,     0,     0,   276,     0,
   568,   262,   263,   264,   265,   266,     0,   267,   268,   269,
   270,   271,   272,   273,   274,   275,     0,     0,     0,     0,
     0,   276,     0,   570,   262,   263,   264,   265,   266,     0,
   267,   268,   269,   270,   271,   272,   273,   274,   275,     0,
     0,     0,     0,     0,   276,     0,   609,   262,   263,   264,
   265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
   274,   275,     0,     0,     0,     0,     0,   276,     0,   611,
   262,   263,   264,   265,   266,     0,   267,   268,   269,   270,
   271,   272,   273,   274,   275,     0,     0,     0,     0,     0,
   276,     0,   624,   262,   263,   264,   265,   266,     0,   267,
   268,   269,   270,   271,   272,   273,   274,   275,     0,     0,
     0,     0,     0,   276,     0,   625,   262,   263,   264,   265,
   266,     0,   267,   268,   269,   270,   271,   272,   273,   274,
   275,     0,     0,     0,     0,     0,   276,     0,   629,   262,
   263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
   272,   273,   274,   275,     0,     0,     0,     0,     0,   276,
     0,   630,   262,   263,   264,   265,   266,     0,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,   631,   262,   263,   264,   265,   266,
     0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     0,     0,     0,     0,     0,   276,     0,   632,   262,   263,
   264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
   273,   274,   275,     0,     0,     0,     0,     0,   276,     0,
   633,   262,   263,   264,   265,   266,     0,   267,   268,   269,
   270,   271,   272,   273,   274,   275,     0,     0,     0,     0,
     0,   276,     0,   661,   262,   263,   264,   265,   266,     0,
   267,   268,   269,   270,   271,   272,   273,   274,   275,     0,
     0,     0,     0,     0,   276,     0,   668,   262,   263,   264,
   265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
   274,   275,     0,     0,     0,     0,     0,   276,     0,   787,
   262,   263,   264,   265,   266,     0,   267,   268,   269,   270,
   271,   272,   273,   274,   275,     0,     0,     0,     0,     0,
   276,     0,   789,   262,   263,   264,   265,   266,     0,   267,
   268,   269,   270,   271,   272,   273,   274,   275,     0,     0,
     0,     0,     0,   276,     0,   791,   262,   263,   264,   265,
   266,     0,   267,   268,   269,   270,   271,   272,   273,   274,
   275,     0,     0,     0,     0,     0,   276,     0,   793,   262,
   263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
   272,   273,   274,   275,     0,     0,     0,     0,     0,   276,
     0,   799,   262,   263,   264,   265,   266,     0,   267,   268,
   269,   270,   271,   272,   273,   274,   275,     0,     0,     0,
     0,     0,   276,     0,   865,   262,   263,   264,   265,   266,
     0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     0,     0,     0,     0,     0,   276,     0,   918,   262,   263,
   264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
   273,   274,   275,     0,     0,     0,     0,     0,   276,     0,
   949,   262,   263,   264,   265,   266,     0,   267,   268,   269,
   270,   271,   272,   273,   274,   275,     0,     0,     0,     0,
     0,   276,     0,  1063,   262,   263,   264,   265,   266,     0,
   267,   268,   269,   270,   271,   272,   273,   274,   275,     0,
     0,     0,     0,     0,   276,     0,  1109,   262,   263,   264,
   265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
   274,   275,     0,     0,     0,     0,     0,   276
};

static const short yycheck[] = {     4,
     4,   164,   319,   255,   167,     4,     2,   291,     5,     4,
     4,     2,     4,     6,   753,     4,     4,     4,    41,     4,
     6,    44,    45,    67,     6,     5,     7,   190,   599,   192,
    45,     4,    67,     6,     4,   131,    68,    34,    35,    36,
    37,    73,    85,    40,     6,     4,   866,   867,    51,    52,
    67,   120,   121,     6,    34,    35,    36,    37,     4,   132,
    40,     5,     7,   131,   137,     6,     6,   131,   137,   131,
   139,   120,   121,   131,   138,   133,   138,    76,    77,    78,
    79,    76,    77,    78,    79,     6,     7,   131,   131,   138,
    34,    35,    36,    37,   138,   131,    40,   120,   121,    52,
   120,   121,   138,   138,   109,   110,   111,   139,   131,   114,
   115,    52,   131,   118,   131,   138,   131,   137,    88,    89,
   125,   131,   127,   128,   129,   106,   131,    49,   133,   134,
     6,   136,   133,    67,   135,   706,   956,   131,   120,   121,
   139,   138,    88,    89,   139,   138,   138,   152,   153,   138,
   138,   138,   135,   138,   253,   131,   161,   140,   138,   443,
   133,   106,   107,   108,   109,   328,   131,   419,   127,   128,
   175,   176,   456,   178,   133,   180,   135,   131,   183,   184,
   120,   121,   165,   127,   128,   348,    45,   170,   171,   132,
   195,   135,   291,    45,   137,   200,   201,   202,   203,   204,
   205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
   215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
   225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
   235,   236,   237,   238,   239,   240,   241,    45,   809,   242,
   243,   244,   245,    47,   120,   121,   127,   128,   253,   131,
     7,   255,   133,   138,   135,   120,   121,   262,   263,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   137,   131,   139,   133,  1015,   138,   283,  1018,
   285,    45,  1021,    68,    68,   290,   291,    68,    73,    73,
   120,   121,    73,     6,   299,   300,   301,   581,   303,   304,
   305,   306,   307,   308,   309,     4,   980,   137,   982,    68,
   984,   131,     7,   133,    73,     6,   321,   322,   323,   324,
   325,   326,   318,   319,   329,    68,     4,   318,   319,   334,
    73,   615,    68,   338,   339,    44,    45,    73,    47,   344,
    25,    26,  1081,    28,   443,   120,   121,     4,   353,   106,
   107,   108,   109,   358,   139,   139,   360,   456,   139,   131,
   131,   133,   137,    68,   648,   649,   650,   651,    73,   131,
   127,   128,    68,  1112,   120,   121,  1115,    73,  1052,  1118,
   139,    68,  1121,   131,     7,    68,    73,   120,   121,     6,
    73,   137,   963,   139,    68,    41,   139,   132,    44,    73,
   120,   121,   137,   139,   137,  1144,   411,  1146,     4,  1148,
   415,   106,   107,   108,   109,   419,   421,   420,   138,   120,
   121,  1095,   137,  1097,   139,  1099,     8,   120,   121,  1103,
   413,   414,   127,   128,   139,   127,   128,   138,   443,   444,
   135,   725,   131,   139,   133,   138,   698,   699,   453,   454,
     4,   456,   139,    68,   459,   460,   139,  1131,    73,  1133,
   465,  1135,   120,   121,   149,   139,   151,     4,     5,   132,
   475,   476,   157,   131,   137,   131,   161,   133,    45,   484,
   138,   131,   581,   106,   107,   108,   109,   131,   131,   133,
   589,     5,   120,   121,   499,   120,   121,    34,    35,    36,
    37,    58,    59,    40,   127,   128,   127,   128,   513,   137,
   515,   516,   137,   198,   135,   131,   615,   133,   522,   522,
    34,    35,    36,    37,     6,     7,    40,   844,   110,   111,
   112,   113,   114,   131,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   120,   121,   120,   121,   131,   130,   648,
   649,   650,   651,   558,   559,   127,   128,   139,   120,   121,
   137,   133,   137,   135,   120,   121,   131,   572,   573,   574,
   575,   576,   577,   578,     4,   137,   581,     6,   131,   582,
   585,   137,   120,   121,   589,   113,   114,   592,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   602,   131,   137,
   133,     8,   130,   120,   121,   120,   121,   122,   123,   124,
   615,     6,   617,    41,     5,   130,    44,    45,   131,    47,
   137,   131,   138,   132,   607,   608,   725,   610,   137,   612,
   613,   316,   317,   132,    61,    62,    63,    64,   137,    66,
   325,   131,   138,   648,   649,   650,   651,    74,    75,   654,
   655,   131,   131,   133,   133,   660,   112,   113,   114,   976,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   138,
   675,   676,   131,   131,   130,   658,   659,   131,   131,   662,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   693,
   122,   123,   124,   138,   130,   699,   131,     8,   130,   137,
     4,   139,   707,   110,   111,   112,   113,   114,   713,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   138,   131,
   725,   133,   727,   130,   729,   132,     6,   127,   128,   131,
   131,   133,   133,   133,   717,   135,   719,   133,   743,   744,
   745,   131,   131,   133,   133,   750,   138,   730,   731,   732,
   133,   133,   735,   736,   737,   738,   739,   740,   741,   131,
   131,   133,   133,   131,   131,   133,   133,   772,   773,   774,
   131,   137,   133,   139,   778,   137,   781,   139,   137,   135,
   139,   786,   137,   137,   139,   139,   137,     6,   139,   474,
   137,   137,   139,   139,     6,   138,    91,   802,   801,   110,
   111,   112,   113,   114,   489,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   137,     6,   139,   800,     4,   130,
     6,   137,   985,   139,   131,   830,   831,   137,   137,   139,
   139,   137,   137,   139,   139,   840,   137,   840,   139,   137,
     6,   139,   133,     4,   130,    57,     5,   135,   844,     7,
   133,   138,     7,   844,     7,     6,   861,   862,   132,     6,
    86,     7,     7,    88,   132,   138,   137,   132,   873,     6,
   137,   854,     4,   878,   879,   134,     6,   135,     7,     7,
     7,     7,     7,     7,     7,   139,   869,   139,   138,   894,
  1053,   138,     7,     7,   131,     7,   901,   880,   110,   111,
   112,   113,   114,   135,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   131,   919,   131,   138,     6,   130,     6,
     4,   606,     7,     6,     6,   134,     6,   932,     6,   133,
     6,   138,     7,     7,     7,     7,     7,     7,     7,     7,
   945,     7,   947,     7,     7,     7,     4,   952,     7,     6,
     6,     6,   957,     6,     4,     7,   641,   642,   643,   110,
   111,   112,   113,   114,     6,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   979,     6,   981,     4,   983,   130,
   976,     6,   131,   988,   989,   976,   138,   135,   132,   994,
   132,     7,     6,     6,     6,  1000,  1001,     6,   138,     6,
   138,     6,     6,  1008,   987,     6,  1011,   138,    87,     6,
   993,     6,     4,   135,   997,     6,     6,     6,   134,     6,
     6,     6,     6,   110,   111,   112,   113,   114,  1033,   116,
   117,   118,   119,   120,   121,   122,   123,   124,  1043,     6,
     6,  1046,     6,   130,  1049,     6,     6,     6,     6,     6,
     6,     6,     6,     6,    87,     7,     4,   138,     7,  1064,
     6,  1066,     6,     6,     6,   750,     6,    84,   135,   134,
     6,  1054,     6,     5,    89,  1058,  1059,   138,   138,   110,
   111,   112,   113,   114,   138,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   139,   138,     6,   138,   137,   130,
   138,   138,   132,   139,    87,  1108,   110,   111,   112,   113,
   114,   137,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   139,  1105,     6,     6,     6,   130,   138,   138,   137,
   815,     6,   817,  1138,     6,     6,  1139,     6,  1141,   110,
   111,   112,   113,   114,     6,   116,   117,   118,   119,   120,
   121,   122,   123,   124,  1159,  1160,     6,     6,  1161,   130,
   845,   132,   847,     6,   849,  1170,   137,     3,     4,     6,
     5,   139,   137,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,   138,     6,   138,
   110,   111,   112,   113,   114,    41,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   138,   137,   139,   138,     6,
   130,     6,     6,     6,    84,    61,    62,    63,    64,    65,
    66,     6,     8,     5,   138,   138,   138,   138,    74,    75,
   139,   110,   111,   112,   113,   114,   138,   116,   117,   118,
   119,   120,   121,   122,   123,   124,     6,     6,     6,   139,
    84,   130,     6,     6,   138,     6,   102,   103,   104,   105,
     6,     6,     6,     6,     6,     0,     0,  1033,   524,     2,
     2,   940,   805,    -1,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,   979,   131,   981,    -1,   983,    -1,
   136,     3,     4,   139,    -1,    -1,    -1,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    -1,    -1,    -1,   110,   111,   112,   113,   114,    41,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    61,
    62,    63,    64,    65,    66,    -1,    -1,    -1,     3,     4,
    -1,    -1,    74,    75,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    -1,    -1,
   102,   103,   104,   105,     6,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,   131,
    -1,     3,     4,    -1,   136,    -1,   138,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    -1,    -1,    -1,    -1,    -1,    -1,   102,   103,   104,
   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,    -1,    -1,    -1,   131,    -1,    -1,   134,
    -1,   136,    -1,   138,    -1,    -1,    -1,    -1,   110,   111,
   112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,
   102,   103,   104,   105,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,   131,
    -1,    -1,   134,    -1,   136,    -1,   138,     3,     4,    -1,
    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,     4,    -1,    -1,    -1,    -1,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,     3,     4,    -1,    -1,    -1,    -1,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    -1,    -1,   102,   103,   104,   105,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,   131,    -1,    -1,   134,    -1,
   136,    -1,   138,   102,   103,   104,   105,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,
    -1,    -1,   131,   102,   103,   104,   105,   136,    -1,   138,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,
    -1,    -1,   131,    -1,     3,     4,     5,   136,     7,   138,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    -1,    34,    35,    36,    37,    -1,
    -1,    40,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     3,     4,    -1,    -1,    -1,    -1,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
   109,    61,    62,    63,    64,    65,    66,    -1,    -1,    -1,
    -1,   120,   121,    -1,    74,    75,    -1,   126,   127,   128,
    -1,    -1,   131,    -1,   133,    -1,   135,   136,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   102,   103,   104,   105,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,   131,     3,     4,     5,    -1,   136,    -1,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    -1,    34,    35,    36,    37,     3,     4,    40,
    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,     3,     4,    -1,
    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,     6,    -1,    -1,
    -1,   102,   103,   104,   105,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,     6,    -1,    -1,
   131,    -1,    -1,    -1,    -1,   136,   102,   103,   104,   105,
    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,     8,
   126,    -1,    -1,    -1,    -1,   131,   102,   103,   104,   105,
   136,    -1,    -1,    -1,     8,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,     8,
   126,    -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,    -1,
   136,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   110,   111,   112,   113,
   114,   130,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   110,   111,   112,   113,   114,   130,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   110,   111,   112,   113,
   114,   130,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   110,   111,   112,   113,   114,   130,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   110,   111,   112,   113,
   114,   130,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   110,   111,   112,   113,   114,   130,   116,   117,   118,
   119,   120,   121,   122,   123,   124,     0,     1,    -1,    -1,
     4,   130,    -1,   110,   111,   112,   113,   114,    -1,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,    33,
   137,    -1,   139,    -1,    38,    39,    -1,    41,    42,    43,
    44,    45,    46,    47,    48,    -1,    50,    51,    52,    53,
    54,    55,    56,    -1,    -1,    -1,    60,    61,    62,    63,
    64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
    74,    75,    -1,    -1,    -1,    -1,    80,    81,    82,    83,
    -1,    -1,    -1,    -1,    88,    -1,    90,    -1,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,    41,    42,
    43,    44,    45,    46,    47,    48,    -1,    50,    -1,    52,
    53,    -1,    55,    56,    -1,    -1,    -1,    -1,    -1,    41,
    42,    43,    44,    45,    46,    47,    48,    -1,    50,    72,
    52,    53,    -1,    55,    56,    -1,    -1,    -1,    81,    82,
    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    72,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    81,
    82,    83,    -1,    -1,    41,    42,    43,    44,    45,    46,
    47,    48,    -1,    50,    -1,    52,    53,    99,    55,    56,
   110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    72,   139,    -1,    -1,    -1,
   130,    -1,    -1,    -1,    81,    82,    83,   137,    -1,    41,
    42,    43,    44,    45,    46,    47,    48,   139,    50,    -1,
    52,    53,    99,    55,    56,    -1,    -1,    -1,    -1,    -1,
    41,    42,    43,    44,    45,    46,    47,    48,    -1,    50,
    72,    52,    53,    -1,    55,    56,    -1,    -1,    -1,    81,
    82,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    72,   139,    -1,    -1,    -1,    -1,    99,    -1,    -1,
    81,    82,    83,    -1,    -1,    41,    42,    43,    44,    45,
    46,    47,    48,    -1,    50,    -1,    52,    53,    99,    55,
    56,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    72,   139,    -1,    -1,
    -1,   130,    -1,    -1,    -1,    81,    82,    83,   137,    -1,
    41,    42,    43,    44,    45,    46,    47,    48,   139,    50,
    -1,    52,    53,    99,    55,    56,    -1,    -1,    -1,    -1,
    -1,    41,    42,    43,    44,    45,    46,    47,    48,    -1,
    50,    72,    52,    53,    -1,    55,    56,    -1,    -1,    -1,
    81,    82,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    72,   139,    -1,    -1,    -1,    -1,    99,    -1,
    -1,    81,    82,    83,    -1,     4,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,   139,    38,
    39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
    -1,    50,    51,    52,    53,    54,    55,    56,    -1,   139,
    -1,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
    69,    70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,
    -1,    80,    81,    82,    83,    -1,    -1,    -1,    -1,    88,
    -1,    90,    -1,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,    41,    42,    43,    44,    45,    46,    47,
    48,    -1,    50,    -1,    52,    53,    -1,    55,    56,   110,
   111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    72,    -1,    -1,    -1,    -1,   130,
    -1,    -1,    -1,    81,    82,    83,   137,    -1,   139,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
   114,    99,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,
    -1,    -1,    -1,   137,    -1,   139,   110,   111,   112,   113,
   114,    -1,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,
   110,   111,   112,   113,   114,   139,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
   130,    -1,    -1,    -1,   110,   111,   112,   113,   114,   139,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,   110,   111,
   112,   113,   114,   139,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,
    -1,    -1,   110,   111,   112,   113,   114,   139,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   110,   111,   112,   113,
   114,   139,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,
   110,   111,   112,   113,   114,   139,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
   130,    -1,    -1,    -1,   110,   111,   112,   113,   114,   139,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,   110,   111,
   112,   113,   114,   139,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,
    -1,    -1,   110,   111,   112,   113,   114,   139,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   110,   111,   112,   113,
   114,   139,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,
   110,   111,   112,   113,   114,   139,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
   130,    -1,    -1,    -1,   110,   111,   112,   113,   114,   139,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,   110,   111,
   112,   113,   114,   139,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,
    -1,    -1,   110,   111,   112,   113,   114,   139,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   110,   111,   112,   113,
   114,   139,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,
   110,   111,   112,   113,   114,   139,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
   130,    -1,    -1,    -1,   110,   111,   112,   113,   114,   139,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,   110,   111,
   112,   113,   114,   139,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,
    -1,    -1,   110,   111,   112,   113,   114,   139,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   110,   111,   112,   113,
   114,   139,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,
   110,   111,   112,   113,   114,   139,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
   130,    -1,    -1,    -1,   110,   111,   112,   113,   114,   139,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,    -1,   130,    -1,   110,   111,   112,   113,
   114,   137,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,   110,   111,
   112,   113,   114,   137,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,
   110,   111,   112,   113,   114,   137,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
   130,    -1,   110,   111,   112,   113,   114,   137,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,   110,   111,   112,   113,   114,   137,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,    -1,   130,    -1,   110,   111,   112,   113,
   114,   137,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,   110,   111,
   112,   113,   114,   137,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,
   110,   111,   112,   113,   114,   137,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
   130,    -1,   110,   111,   112,   113,   114,   137,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,   110,   111,   112,   113,   114,   137,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,    -1,   130,    -1,   110,   111,   112,   113,
   114,   137,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,   110,   111,
   112,   113,   114,   137,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,
   110,   111,   112,   113,   114,   137,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
   130,    -1,   110,   111,   112,   113,   114,   137,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,   110,   111,   112,   113,   114,   137,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,    -1,   130,    -1,   110,   111,   112,   113,
   114,   137,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,   110,   111,
   112,   113,   114,   137,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,
   110,   111,   112,   113,   114,   137,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
   130,    -1,   110,   111,   112,   113,   114,   137,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,   110,   111,   112,   113,   114,   137,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,    -1,   130,    -1,   110,   111,   112,   113,
   114,   137,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,   110,   111,
   112,   113,   114,   137,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,
   110,   111,   112,   113,   114,   137,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
   130,    -1,   110,   111,   112,   113,   114,   137,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,   110,   111,   112,   113,   114,   137,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,    -1,   130,    -1,   110,   111,   112,   113,
   114,   137,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,   110,   111,
   112,   113,   114,   137,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,
   110,   111,   112,   113,   114,   137,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
   130,    -1,   110,   111,   112,   113,   114,   137,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,   110,   111,   112,   113,   114,   137,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,    -1,   130,    -1,   110,   111,   112,   113,
   114,   137,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,   110,   111,
   112,   113,   114,   137,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,
   110,   111,   112,   113,   114,   137,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
   130,    -1,   110,   111,   112,   113,   114,   137,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   134,   110,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,   134,   110,   111,   112,   113,   114,    -1,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   134,   110,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,   134,   110,   111,   112,   113,   114,    -1,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   134,   110,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,   134,   110,   111,   112,   113,   114,    -1,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   134,   110,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,   134,   110,   111,   112,   113,   114,    -1,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   134,   110,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,   134,   110,   111,   112,   113,   114,    -1,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   134,   110,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,   134,   110,   111,   112,   113,   114,    -1,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   134,   110,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,   134,   110,   111,   112,   113,   114,    -1,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   134,   110,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,   134,   110,   111,   112,   113,   114,    -1,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   134,   110,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,   134,   110,   111,   112,   113,   114,    -1,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   134,   110,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,   134,   110,   111,   112,   113,   114,    -1,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   134,   110,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,   134,   110,   111,   112,   113,   114,    -1,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   134,   110,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,   134,   110,   111,   112,   113,   114,    -1,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   134,   110,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,   134,   110,   111,   112,   113,   114,    -1,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   134,   110,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,   134,   110,   111,   112,   113,   114,    -1,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   134,   110,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,   134,   110,   111,   112,   113,   114,    -1,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   134,   110,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,   132,
   110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
   130,    -1,   132,   110,   111,   112,   113,   114,    -1,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,    -1,   130,    -1,   132,   110,   111,   112,   113,
   114,    -1,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,   132,   110,
   111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,   130,
    -1,   132,   110,   111,   112,   113,   114,    -1,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,   132,   110,   111,   112,   113,   114,
    -1,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,    -1,   130,    -1,   132,   110,   111,
   112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,
   132,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
    -1,   130,    -1,   132,   110,   111,   112,   113,   114,    -1,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,    -1,   130,    -1,   132,   110,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,   132,
   110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
   130,    -1,   132,   110,   111,   112,   113,   114,    -1,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,    -1,   130,    -1,   132,   110,   111,   112,   113,
   114,    -1,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,   132,   110,
   111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,   130,
    -1,   132,   110,   111,   112,   113,   114,    -1,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,   132,   110,   111,   112,   113,   114,
    -1,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,    -1,   130,    -1,   132,   110,   111,
   112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,
   132,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
    -1,   130,    -1,   132,   110,   111,   112,   113,   114,    -1,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,    -1,   130,    -1,   132,   110,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,   132,
   110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
   130,    -1,   132,   110,   111,   112,   113,   114,    -1,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,    -1,   130,    -1,   132,   110,   111,   112,   113,
   114,    -1,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,   132,   110,
   111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,   130,
    -1,   132,   110,   111,   112,   113,   114,    -1,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,   132,   110,   111,   112,   113,   114,
    -1,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,    -1,   130,    -1,   132,   110,   111,
   112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,
   132,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
    -1,   130,    -1,   132,   110,   111,   112,   113,   114,    -1,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,    -1,   130,    -1,   132,   110,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,   132,
   110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
   130,    -1,   132,   110,   111,   112,   113,   114,    -1,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,    -1,   130,    -1,   132,   110,   111,   112,   113,
   114,    -1,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,   132,   110,
   111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,   130,
    -1,   132,   110,   111,   112,   113,   114,    -1,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,   132,   110,   111,   112,   113,   114,
    -1,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,    -1,   130,    -1,   132,   110,   111,
   112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,
   132,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
    -1,   130,    -1,   132,   110,   111,   112,   113,   114,    -1,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,    -1,   130,    -1,   132,   110,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,   132,
   110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
   130,    -1,   132,   110,   111,   112,   113,   114,    -1,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,    -1,   130,    -1,   132,   110,   111,   112,   113,
   114,    -1,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,   132,   110,
   111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,   130,
    -1,   132,   110,   111,   112,   113,   114,    -1,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,    -1,   130,    -1,   132,   110,   111,   112,   113,   114,
    -1,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,    -1,   130,    -1,   132,   110,   111,
   112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,
   132,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
    -1,   130,    -1,   132,   110,   111,   112,   113,   114,    -1,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,    -1,   130,    -1,   132,   110,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,    -1,   130
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 2:
#line 144 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 155 "Gmsh.y"
{ return 1; ;
    break;}
case 6:
#line 156 "Gmsh.y"
{ return 1; ;
    break;}
case 7:
#line 157 "Gmsh.y"
{ return 1; ;
    break;}
case 8:
#line 158 "Gmsh.y"
{ return 1; ;
    break;}
case 9:
#line 159 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 10:
#line 160 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 11:
#line 161 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 162 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 163 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 164 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 15:
#line 165 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 166 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 167 "Gmsh.y"
{ return 1; ;
    break;}
case 18:
#line 168 "Gmsh.y"
{ return 1; ;
    break;}
case 19:
#line 173 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 20:
#line 178 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 21:
#line 196 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 22:
#line 203 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-6].c); Free(yyvsp[-5].c);
    ;
    break;}
case 23:
#line 213 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 29:
#line 228 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 30:
#line 230 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 31:
#line 235 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 32:
#line 237 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 33:
#line 242 "Gmsh.y"
{
      if(!strcmp(yyvsp[0].c, "SP")){
	ViewElementIdx = 0; ViewNumNodes = 1; ViewNumComp = 1;
	ViewValueList = View->SP; ViewNumList = &View->NbSP;
      }
      else if(!strcmp(yyvsp[0].c, "VP")){
	ViewElementIdx = 1; ViewNumNodes = 1; ViewNumComp = 3;
	ViewValueList = View->VP; ViewNumList = &View->NbVP;
      }
      else if(!strcmp(yyvsp[0].c, "TP")){
	ViewElementIdx = 2; ViewNumNodes = 1; ViewNumComp = 9;
	ViewValueList = View->TP; ViewNumList = &View->NbTP;
      }
      else if(!strcmp(yyvsp[0].c, "SL")){
	ViewElementIdx = 3; ViewNumNodes = 2; ViewNumComp = 1;
	ViewValueList = View->SL; ViewNumList = &View->NbSL;
      }
      else if(!strcmp(yyvsp[0].c, "VL")){
	ViewElementIdx = 4; ViewNumNodes = 2; ViewNumComp = 3;
	ViewValueList = View->VL; ViewNumList = &View->NbVL;
      }
      else if(!strcmp(yyvsp[0].c, "TL")){
	ViewElementIdx = 5; ViewNumNodes = 2; ViewNumComp = 9;
	ViewValueList = View->TL; ViewNumList = &View->NbTL;
      }
      else if(!strcmp(yyvsp[0].c, "ST")){
	ViewElementIdx = 6; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->ST; ViewNumList = &View->NbST;
      }
      else if(!strcmp(yyvsp[0].c, "VT")){
	ViewElementIdx = 7; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VT; ViewNumList = &View->NbVT;
      }
      else if(!strcmp(yyvsp[0].c, "TT")){
	ViewElementIdx = 8; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TT; ViewNumList = &View->NbTT;
      }
      else if(!strcmp(yyvsp[0].c, "SQ")){
	ViewElementIdx = 9; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SQ; ViewNumList = &View->NbSQ;
      }
      else if(!strcmp(yyvsp[0].c, "VQ")){
	ViewElementIdx = 10; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VQ; ViewNumList = &View->NbVQ;
      }
      else if(!strcmp(yyvsp[0].c, "TQ")){
	ViewElementIdx = 11; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TQ; ViewNumList = &View->NbTQ;
      }
      else if(!strcmp(yyvsp[0].c, "SS")){
	ViewElementIdx = 12; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SS; ViewNumList = &View->NbSS;
      }
      else if(!strcmp(yyvsp[0].c, "VS")){
	ViewElementIdx = 13; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VS; ViewNumList = &View->NbVS;
      }
      else if(!strcmp(yyvsp[0].c, "TS")){
	ViewElementIdx = 14; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TS; ViewNumList = &View->NbTS;
      }
      else if(!strcmp(yyvsp[0].c, "SH")){
	ViewElementIdx = 15; ViewNumNodes = 8; ViewNumComp = 1;
	ViewValueList = View->SH; ViewNumList = &View->NbSH;
      }
      else if(!strcmp(yyvsp[0].c, "VH")){
	ViewElementIdx = 16; ViewNumNodes = 8; ViewNumComp = 3;
	ViewValueList = View->VH; ViewNumList = &View->NbVH;
      }
      else if(!strcmp(yyvsp[0].c, "TH")){
	ViewElementIdx = 17; ViewNumNodes = 8; ViewNumComp = 9;
	ViewValueList = View->TH; ViewNumList = &View->NbTH;
      }
      else if(!strcmp(yyvsp[0].c, "SI")){
	ViewElementIdx = 18; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->SI; ViewNumList = &View->NbSI;
      }
      else if(!strcmp(yyvsp[0].c, "VI")){
	ViewElementIdx = 19; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VI; ViewNumList = &View->NbVI;
      }
      else if(!strcmp(yyvsp[0].c, "TI")){
	ViewElementIdx = 20; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TI; ViewNumList = &View->NbTI;
      }
      else if(!strcmp(yyvsp[0].c, "SY")){
	ViewElementIdx = 21; ViewNumNodes = 5; ViewNumComp = 1;
	ViewValueList = View->SY; ViewNumList = &View->NbSY;
      }
      else if(!strcmp(yyvsp[0].c, "VY")){
	ViewElementIdx = 22; ViewNumNodes = 5; ViewNumComp = 3;
	ViewValueList = View->VY; ViewNumList = &View->NbVY;
      }
      else if(!strcmp(yyvsp[0].c, "TY")){
	ViewElementIdx = 23; ViewNumNodes = 5; ViewNumComp = 9;
	ViewValueList = View->TY; ViewNumList = &View->NbTY;
      }
      else if(!strcmp(yyvsp[0].c, "SL2")){
	ViewElementIdx = 3; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->SL2; ViewNumList = &View->NbSL2;
      }
      else if(!strcmp(yyvsp[0].c, "VL2")){
	ViewElementIdx = 4; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VL2; ViewNumList = &View->NbVL2;
      }
      else if(!strcmp(yyvsp[0].c, "TL2")){
	ViewElementIdx = 5; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TL2; ViewNumList = &View->NbTL2;
      }
      else if(!strcmp(yyvsp[0].c, "ST2")){
	ViewElementIdx = 6; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->ST2; ViewNumList = &View->NbST2;
      }
      else if(!strcmp(yyvsp[0].c, "VT2")){
	ViewElementIdx = 7; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VT2; ViewNumList = &View->NbVT2;
      }
      else if(!strcmp(yyvsp[0].c, "TT2")){
	ViewElementIdx = 8; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TT2; ViewNumList = &View->NbTT2;
      }
      else if(!strcmp(yyvsp[0].c, "SQ2")){
	ViewElementIdx = 9; ViewNumNodes = 9; ViewNumComp = 1;
	ViewValueList = View->SQ2; ViewNumList = &View->NbSQ2;
      }
      else if(!strcmp(yyvsp[0].c, "VQ2")){
	ViewElementIdx = 10; ViewNumNodes = 9; ViewNumComp = 3;
	ViewValueList = View->VQ2; ViewNumList = &View->NbVQ2;
      }
      else if(!strcmp(yyvsp[0].c, "TQ2")){
	ViewElementIdx = 11; ViewNumNodes = 9; ViewNumComp = 9;
	ViewValueList = View->TQ2; ViewNumList = &View->NbTQ2;
      }
      else if(!strcmp(yyvsp[0].c, "SS2")){
	ViewElementIdx = 12; ViewNumNodes = 10; ViewNumComp = 1;
	ViewValueList = View->SS2; ViewNumList = &View->NbSS2;
      }
      else if(!strcmp(yyvsp[0].c, "VS2")){
	ViewElementIdx = 13; ViewNumNodes = 10; ViewNumComp = 3;
	ViewValueList = View->VS2; ViewNumList = &View->NbVS2;
      }
      else if(!strcmp(yyvsp[0].c, "TS2")){
	ViewElementIdx = 14; ViewNumNodes = 10; ViewNumComp = 9;
	ViewValueList = View->TS2; ViewNumList = &View->NbTS2;
      }
      else if(!strcmp(yyvsp[0].c, "SH2")){
	ViewElementIdx = 15; ViewNumNodes = 27; ViewNumComp = 1;
	ViewValueList = View->SH2; ViewNumList = &View->NbSH2;
      }
      else if(!strcmp(yyvsp[0].c, "VH2")){
	ViewElementIdx = 16; ViewNumNodes = 27; ViewNumComp = 3;
	ViewValueList = View->VH2; ViewNumList = &View->NbVH2;
      }
      else if(!strcmp(yyvsp[0].c, "TH2")){
	ViewElementIdx = 17; ViewNumNodes = 27; ViewNumComp = 9;
	ViewValueList = View->TH2; ViewNumList = &View->NbTH2;
      }
      else if(!strcmp(yyvsp[0].c, "SI2")){
	ViewElementIdx = 18; ViewNumNodes = 18; ViewNumComp = 1;
	ViewValueList = View->SI2; ViewNumList = &View->NbSI2;
      }
      else if(!strcmp(yyvsp[0].c, "VI2")){
	ViewElementIdx = 19; ViewNumNodes = 18; ViewNumComp = 3;
	ViewValueList = View->VI2; ViewNumList = &View->NbVI2;
      }
      else if(!strcmp(yyvsp[0].c, "TI2")){
	ViewElementIdx = 20; ViewNumNodes = 18; ViewNumComp = 9;
	ViewValueList = View->TI2; ViewNumList = &View->NbTI2;
      }
      else if(!strcmp(yyvsp[0].c, "SY2")){
	ViewElementIdx = 21; ViewNumNodes = 14; ViewNumComp = 1;
	ViewValueList = View->SY2; ViewNumList = &View->NbSY2;
      }
      else if(!strcmp(yyvsp[0].c, "VY2")){
	ViewElementIdx = 22; ViewNumNodes = 14; ViewNumComp = 3;
	ViewValueList = View->VY2; ViewNumList = &View->NbVY2;
      }
      else if(!strcmp(yyvsp[0].c, "TY2")){
	ViewElementIdx = 23; ViewNumNodes = 14; ViewNumComp = 9;
	ViewValueList = View->TY2; ViewNumList = &View->NbTY2;
      }
      else{
	yymsg(GERROR, "Unknown element type '%s'", yyvsp[0].c);	
	ViewElementIdx = -1; ViewNumNodes = 0; ViewNumComp = 0;
	ViewValueList = NULL; ViewNumList = NULL;
      }
      Free(yyvsp[0].c);
      ViewCoordIdx = 0;
    ;
    break;}
case 34:
#line 432 "Gmsh.y"
{
      if(ViewValueList){
	if(ViewCoordIdx != 3 * ViewNumNodes){
	  yymsg(GERROR, "Wrong number of node coordinates (%d != %d)", 
		ViewCoordIdx, 3 * ViewNumNodes);
	  double d = 0;
	  for(int i = 0; i < 3 * ViewNumNodes; i++)
	    List_Add(ViewValueList, &d);
	}
	else{
	  for(int i = 0; i < 3; i++)
	    for(int j = 0; j < ViewNumNodes; j++)
	      List_Add(ViewValueList, &ViewCoord[3*j+i]);
	}
	ViewNumListTmp = List_Nbr(ViewValueList);
      }
    ;
    break;}
case 35:
#line 450 "Gmsh.y"
{
      if(ViewValueList){  
	if((List_Nbr(ViewValueList) - ViewNumListTmp) % (ViewNumComp * ViewNumNodes)) 
	  ViewErrorFlags[ViewElementIdx]++;
	(*ViewNumList)++;
      }
    ;
    break;}
case 36:
#line 461 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 37:
#line 466 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 38:
#line 474 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 39:
#line 481 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 40:
#line 488 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 41:
#line 493 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 42:
#line 501 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 43:
#line 508 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 44:
#line 516 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 45:
#line 523 "Gmsh.y"
{
      ViewValueList = View->Time;
    ;
    break;}
case 46:
#line 527 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 534 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 48:
#line 535 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 49:
#line 536 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 50:
#line 537 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 51:
#line 538 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 52:
#line 542 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 53:
#line 543 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 54:
#line 551 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 55:
#line 582 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 56:
#line 621 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 57:
#line 675 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 58:
#line 692 "Gmsh.y"
{
      // appends to the list
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++)
	  List_Add(pSymbol->val, List_Pointer(yyvsp[-1].l, i));
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 59:
#line 710 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 60:
#line 721 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 61:
#line 740 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 62:
#line 754 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 63:
#line 771 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 64:
#line 797 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 65:
#line 824 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 66:
#line 838 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 67:
#line 855 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 68:
#line 869 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 69:
#line 886 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 70:
#line 906 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 71:
#line 929 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 72:
#line 939 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 73:
#line 958 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num, THEM)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	Vertex *v = Create_Vertex(num, CTX.geom.scaling_factor * yyvsp[-1].v[0],
				  CTX.geom.scaling_factor * yyvsp[-1].v[1],
				  CTX.geom.scaling_factor * yyvsp[-1].v[2],
				  CTX.geom.scaling_factor * yyvsp[-1].v[3], 1.0);
	Tree_Add(THEM->Points, &v);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 74:
#line 974 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT, THEM)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 75:
#line 990 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
        Vertex *v = FindPoint((int)p, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      List_Delete(yyvsp[-9].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 76:
#line 1009 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 77:
#line 1028 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 78:
#line 1046 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 79:
#line 1064 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 80:
#line 1082 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 81:
#line 1108 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 82:
#line 1126 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 83:
#line 1153 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 84:
#line 1172 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 85:
#line 1196 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 86:
#line 1220 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 87:
#line 1246 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num, THEM)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 88:
#line 1263 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
	Curve *c = FindCurve((int)p, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown curve %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 89:
#line 1281 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE, THEM)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 90:
#line 1300 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	s->Support = s;
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 91:
#line 1319 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)fabs(d), THEM);
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = s;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 92:
#line 1358 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      Surface *support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support){
	yymsg(GERROR, "Unknown support surface %d", (int)yyvsp[-4].d);
      }
      else{
	if(FindSurface(num, THEM)){
	  yymsg(GERROR, "Surface %d already exists", num);
	}
	else{
	  Surface *s = Create_Surface(num, MSH_SURF_TRIMMED);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-2].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = support;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-2].l);
      yyval.s.Type = MSH_SURF_TRIMMED;
      yyval.s.Num = num;
    ;
    break;}
case 93:
#line 1385 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurface(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 94:
#line 1404 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurfaceSupport(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 95:
#line 1421 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num, THEM)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 96:
#line 1437 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE, THEM)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 97:
#line 1457 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 98:
#line 1474 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 99:
#line 1491 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME, THEM)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 100:
#line 1512 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 101:
#line 1517 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 102:
#line 1522 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 103:
#line 1527 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 104:
#line 1534 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 105:
#line 1535 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 106:
#line 1536 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 107:
#line 1541 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 108:
#line 1545 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 109:
#line 1549 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 110:
#line 1565 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 111:
#line 1581 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 112:
#line 1597 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 113:
#line 1618 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	int j;
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 114:
#line 1632 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 115:
#line 1638 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 116:
#line 1644 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 1);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 117:
#line 1656 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 118:
#line 1665 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 119:
#line 1675 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	Init_Mesh(THEM);
      }
      else if(!strcmp(yyvsp[-1].c, "Physicals")){
	List_Action(THEM->PhysicalGroups, Free_PhysicalGroup);
	List_Reset(THEM->PhysicalGroups);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 120:
#line 1689 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 121:
#line 1708 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 122:
#line 1722 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH : 
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, m);
      Free(yyvsp[-1].c);
    ;
    break;}
case 123:
#line 1730 "Gmsh.y"
{
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 124:
#line 1736 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH :
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, m);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 125:
#line 1747 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 126:
#line 1761 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	ParseFile(tmpstring, 0, 0, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  CreateOutputFile(tmpstring, CTX.print.format);
	}
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 127:
#line 1805 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 128:
#line 1820 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Background") && !strcmp(yyvsp[-5].c, "Mesh")  && !strcmp(yyvsp[-4].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-2].d);
	if(vv) BGMWithView(*vv);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 129:
#line 1831 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	SleepInSeconds(yyvsp[-1].d);
      }
      else if(!strcmp(yyvsp[-2].c, "Remesh")){
	ReMesh(THEM);
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else if(!strcmp(yyvsp[-2].c, "Status")){
	THEM->status = (int)yyvsp[-1].d;
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 130:
#line 1850 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 131:
#line 1860 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "ElementsFromAllViews"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsFromVisibleViews"))
	CombineViews(0, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsByViewName"))
	CombineViews(0, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromAllViews"))
	CombineViews(1, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromVisibleViews"))
	CombineViews(1, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsByViewName"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 132:
#line 1882 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 133:
#line 1886 "Gmsh.y"
{
      CTX.forced_bbox = 0;
      SetBoundingBox();
    ;
    break;}
case 134:
#line 1891 "Gmsh.y"
{
      CTX.forced_bbox = 1;
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 135:
#line 1896 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch) // we're in interactive mode
	Draw();
#endif
    ;
    break;}
case 136:
#line 1909 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 137:
#line 1924 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 138:
#line 1940 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 139:
#line 1966 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 140:
#line 1993 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 141:
#line 2025 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 142:
#line 2032 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 143:
#line 2037 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 144:
#line 2043 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 145:
#line 2047 "Gmsh.y"
{
    ;
    break;}
case 146:
#line 2056 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-1].l, 
		    yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 147:
#line 2064 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-1].l, 
		    0., 0., 0., yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 148:
#line 2072 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-1].l, 
		    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 149:
#line 2080 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 150:
#line 2085 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-3].l, 
		    yyvsp[-5].v[0], yyvsp[-5].v[1], yyvsp[-5].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 151:
#line 2093 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 152:
#line 2098 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-3].l, 
		    0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 153:
#line 2106 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 154:
#line 2111 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-3].l, 
		    yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 155:
#line 2121 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 156:
#line 2128 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 157:
#line 2135 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 158:
#line 2142 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 159:
#line 2149 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 160:
#line 2156 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 161:
#line 2163 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 162:
#line 2170 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 163:
#line 2177 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 164:
#line 2184 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 165:
#line 2189 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 166:
#line 2196 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 167:
#line 2201 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 168:
#line 2208 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 169:
#line 2213 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 170:
#line 2220 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 171:
#line 2225 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 172:
#line 2232 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 173:
#line 2237 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 174:
#line 2244 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 175:
#line 2249 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 176:
#line 2256 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 177:
#line 2261 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 178:
#line 2268 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 179:
#line 2273 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 180:
#line 2280 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 181:
#line 2285 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 182:
#line 2296 "Gmsh.y"
{
    ;
    break;}
case 183:
#line 2299 "Gmsh.y"
{
    ;
    break;}
case 184:
#line 2305 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 185:
#line 2331 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 186:
#line 2355 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 187:
#line 2364 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 188:
#line 2382 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 189:
#line 2400 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 190:
#line 2418 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	s->Recombine_Dir = 1;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 191:
#line 2447 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-5].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-5].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-2].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-5].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  if (!strcmp(yyvsp[-1].c, "Right"))
	    s->Recombine_Dir = 1;
	  else if (!strcmp(yyvsp[-1].c, "Left"))
	    s->Recombine_Dir = -1;
	  else
	    s->Recombine_Dir = 0;
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-2].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-2].l);
      Free(yyvsp[-1].c);
    ;
    break;}
case 192:
#line 2482 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        int k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , (int)yyvsp[-4].d, k);
        else{
	  List_Reset(s->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 193:
#line 2509 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  List_Reset(v->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j, THEM);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 194:
#line 2536 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 195:
#line 2550 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 196:
#line 2569 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 197:
#line 2573 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 198:
#line 2582 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 199:
#line 2583 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 200:
#line 2584 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 201:
#line 2585 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 202:
#line 2586 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 203:
#line 2587 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 204:
#line 2588 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 205:
#line 2589 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 206:
#line 2591 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 207:
#line 2597 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 208:
#line 2598 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 209:
#line 2599 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 210:
#line 2600 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 211:
#line 2601 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 212:
#line 2602 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 213:
#line 2603 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 214:
#line 2604 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 215:
#line 2605 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 216:
#line 2606 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 217:
#line 2607 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 218:
#line 2608 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 219:
#line 2609 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 220:
#line 2610 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 221:
#line 2611 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 222:
#line 2612 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 223:
#line 2613 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 224:
#line 2614 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 225:
#line 2615 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 226:
#line 2616 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 227:
#line 2617 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 228:
#line 2618 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 229:
#line 2619 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 230:
#line 2620 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 231:
#line 2621 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 232:
#line 2622 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 233:
#line 2623 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 234:
#line 2624 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 235:
#line 2625 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 236:
#line 2626 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 237:
#line 2627 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 238:
#line 2628 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 239:
#line 2630 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 240:
#line 2631 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 241:
#line 2632 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 242:
#line 2633 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 243:
#line 2634 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 244:
#line 2635 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 245:
#line 2636 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 246:
#line 2637 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 247:
#line 2638 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 248:
#line 2639 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 249:
#line 2640 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 250:
#line 2641 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 251:
#line 2642 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 252:
#line 2643 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 253:
#line 2644 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 254:
#line 2645 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 255:
#line 2646 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 256:
#line 2647 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 257:
#line 2648 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 258:
#line 2649 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 259:
#line 2650 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 260:
#line 2659 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 261:
#line 2660 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 262:
#line 2661 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 263:
#line 2662 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 264:
#line 2663 "Gmsh.y"
{ yyval.d = Get_GmshMajorVersion(); ;
    break;}
case 265:
#line 2664 "Gmsh.y"
{ yyval.d = Get_GmshMinorVersion(); ;
    break;}
case 266:
#line 2665 "Gmsh.y"
{ yyval.d = Get_GmshPatchVersion(); ;
    break;}
case 267:
#line 2670 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 268:
#line 2683 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 269:
#line 2703 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 270:
#line 2717 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 271:
#line 2730 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 272:
#line 2753 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 273:
#line 2771 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 274:
#line 2789 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 275:
#line 2807 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 276:
#line 2825 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 277:
#line 2833 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 278:
#line 2837 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 279:
#line 2841 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 280:
#line 2845 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 281:
#line 2849 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 282:
#line 2856 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 283:
#line 2860 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 284:
#line 2864 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 285:
#line 2868 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 286:
#line 2875 "Gmsh.y"
{
    ;
    break;}
case 287:
#line 2878 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 288:
#line 2882 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 289:
#line 2889 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 290:
#line 2894 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 291:
#line 2902 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 292:
#line 2907 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 293:
#line 2911 "Gmsh.y"
{
      // creates an empty list
      yyval.l = List_Create(2, 1, sizeof(double));
    ;
    break;}
case 294:
#line 2916 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 295:
#line 2920 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 296:
#line 2932 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 297:
#line 2938 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 298:
#line 2949 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 299:
#line 2969 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 300:
#line 2979 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 301:
#line 2989 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 302:
#line 2999 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 303:
#line 3016 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 304:
#line 3035 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 305:
#line 3059 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 306:
#line 3088 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 307:
#line 3093 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 308:
#line 3097 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 309:
#line 3101 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 310:
#line 3114 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 311:
#line 3118 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 312:
#line 3130 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 313:
#line 3137 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 314:
#line 3159 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 315:
#line 3163 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 316:
#line 3178 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 317:
#line 3183 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 318:
#line 3190 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 319:
#line 3194 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 320:
#line 3202 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 321:
#line 3210 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 322:
#line 3224 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '/' || yyvsp[-1].c[i] == '\\')
	  break;
      }
      if(i <= 0)
	strcpy(yyval.c, yyvsp[-1].c);
      else
	strcpy(yyval.c, &yyvsp[-1].c[i+1]);
      Free(yyvsp[-1].c);
    ;
    break;}
case 323:
#line 3238 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 324:
#line 3242 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 325:
#line 3261 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 326:
#line 3283 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3306 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
